{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Readme/","text":"This is study notes about everything i learned \u00b6 TODO: \u00b6 add Opration System notes Markdown syntaxs and Examples \u00b6 Title \u00b6 This is an H1 \u00b6 This is an H2 \u00b6 This is an H6 \u00b6 # This is an H1 ## This is an H2 ###### This is an H6 Quote \u00b6 This is the first level of quoting. This is nested blockquote. Back to the first level. > This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level. Lists \u00b6 Red Green Blue * Red * Green * Blue For nested list * Red * Green * Blue * Red * Green * Blue ordered list Bird McHale Parish 1. Bird 2. McHale 3. Parish Code Block \u00b6 This is code blocks ``` This is code blocks ``` We can choose which language is used in code block by adding it behind ``` ``` C++ This is code blocks for C++ ``` #include \"stdio.h\" int main(int argc, char ** argv) { printf(\"Hello world\\n\"); return 0; } Link \u00b6 This is an example inline link. This link has no title attribute. This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute. Highlight \u00b6 single asterisks single underscores double asterisks double underscores *single asterisks* _single underscores_ **double asterisks** __double underscores__ Highlight of a function \u00b6 Use the printf() function. Use the `printf()` function. Table \u00b6 left right mid content content content content content content | left | right | mid | | :-----| ----: | :----: | | content | content | content | | content | content | content | Image \u00b6 A simple one can be use like this ![test](./img/icon.png) By using css format, we can change image size & image centering <p align=\"center\"> <img src=\"./img/icon.png\" width=\"30\"/> </p> Markdown convert to Textile \u00b6 docs pandoc MANUAL.md -t textile -o example25.textile","title":"Home"},{"location":"Readme/#this-is-study-notes-about-everything-i-learned","text":"","title":"This is study notes about everything i learned"},{"location":"Readme/#todo","text":"add Opration System notes","title":"TODO:"},{"location":"Readme/#markdown-syntaxs-and-examples","text":"","title":"Markdown syntaxs and Examples"},{"location":"Readme/#title","text":"","title":"Title"},{"location":"Readme/#this-is-an-h1","text":"","title":"This is an H1"},{"location":"Readme/#this-is-an-h2","text":"","title":"This is an H2"},{"location":"Readme/#this-is-an-h6","text":"# This is an H1 ## This is an H2 ###### This is an H6","title":"This is an H6"},{"location":"Readme/#quote","text":"This is the first level of quoting. This is nested blockquote. Back to the first level. > This is the first level of quoting. > > > This is nested blockquote. > > Back to the first level.","title":"Quote"},{"location":"Readme/#lists","text":"Red Green Blue * Red * Green * Blue For nested list * Red * Green * Blue * Red * Green * Blue ordered list Bird McHale Parish 1. Bird 2. McHale 3. Parish","title":"Lists"},{"location":"Readme/#code-block","text":"This is code blocks ``` This is code blocks ``` We can choose which language is used in code block by adding it behind ``` ``` C++ This is code blocks for C++ ``` #include \"stdio.h\" int main(int argc, char ** argv) { printf(\"Hello world\\n\"); return 0; }","title":"Code Block"},{"location":"Readme/#link","text":"This is an example inline link. This link has no title attribute. This is [an example](http://example.com/ \"Title\") inline link. [This link](http://example.net/) has no title attribute.","title":"Link"},{"location":"Readme/#highlight","text":"single asterisks single underscores double asterisks double underscores *single asterisks* _single underscores_ **double asterisks** __double underscores__","title":"Highlight"},{"location":"Readme/#highlight-of-a-function","text":"Use the printf() function. Use the `printf()` function.","title":"Highlight of a function"},{"location":"Readme/#table","text":"left right mid content content content content content content | left | right | mid | | :-----| ----: | :----: | | content | content | content | | content | content | content |","title":"Table"},{"location":"Readme/#image","text":"A simple one can be use like this ![test](./img/icon.png) By using css format, we can change image size & image centering <p align=\"center\"> <img src=\"./img/icon.png\" width=\"30\"/> </p>","title":"Image"},{"location":"Readme/#markdown-convert-to-textile","text":"docs pandoc MANUAL.md -t textile -o example25.textile","title":"Markdown convert to Textile"},{"location":"Useful_Command/","text":"Memory monitor command \u00b6 Note that Linux likes to use any extra memory to cache hard drive blocks. So you don't want to look at just the free Mem. You want to look at the free column of the -/+ buffers/cache: row. This shows how much memory is available to applications. So I just ran free -m and got this: watch -n 5 free -m Reminder : To stop this watch cycle you can just press Ctrl+C. The watch command can be also used for monitoring other data with time update Process name(PID) \u00b6 ps listed every process that is running ps aux | grep <program name> with pgrep and pidof, it will only return PID of the program name pgrep <program_name> pidof <program_name> It can also reach by program itself c code \u00b6 #include <stdio.h> #include <unistd.h> int main() { pid_t pid = getpid(); printf(\"The PID of this process is: %d\\n\", pid); return 0; } python \u00b6 import os pid = os.getpid() print(f\"The PID of this process is: {pid}\") We can write it to a script also. #!/bin/bash # \u555f\u52d5\u7a0b\u5e8f\u4e26\u5c07\u5176\u653e\u5165\u5f8c\u53f0 ./my_program & # \u7372\u53d6\u5f8c\u53f0\u9032\u7a0b\u7684 PID PID=$! echo \"The PID of my_program is: $PID\" Process Info in Linux \u00b6 Files located in /proc/[pid]/ provides tons of information about process including kernel content, complete docs can be found here The directory /proc contains (among other things) one subdirectory for each process running on the system, which is named after the process ID (PID). if there is any doubt, review the kernel documentation in the directory /usr/src/linux/Documentation. status \u00b6 overview of process information, such as virtual memory, code and heap...so on cat /proc/[pid]/status # \u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/status This shows you nearly the same information you would get if you viewed it with the ps command. In fact, ps uses the proc file system to obtain its information. But you get a more detailed view of the process by reading the file /proc/PID/status. maps \u00b6 further information about memory mapping, address range...so on The /proc/PID/maps file contains the currently mapped memory regions and their access permissions. cat /proc/[pid]/maps #\u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/maps smaps \u00b6 much further information about each memory location of info, RSS(Resident Set Size), PSS(Proportional Set Size)...so on The /proc/PID/smaps is an extension based on maps, showing the memory consumption for each of the process's mappings. cat /proc/[pid]/smaps #\u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/smaps Like before, we can also write sript for automation, this time it's done by using python script VS Code \u00b6 ctrl + shift + del : clear terminal ssh \u00b6 scp \u00b6 copy files between ssh server and client ```sh \u5f9e\u672c\u5730\u7aef\u8907\u88fd\u5230\u9060\u7aef \u00b6 scp /path/file1 user@192.168.0.1:/path/file2 sh \u5f9e\u9060\u7aef\u8907\u88fd\u5230\u672c\u5730\u7aef \u00b6 scp user@192.168.0.1:/path/file2 /path/file1 `` -r : \u8907\u88fd\u6574\u500b\u76ee\u9304 -p : \u4fdd\u7559\u6a94\u6848\u6642\u9593\u8207\u6b0a\u9650 -c` : \u8cc7\u6599\u58d3\u7e2e git \u00b6 \u62c9\u9060\u7aef\u7684branch, \u53c8\u60f3\u4fdd\u5b58\u672c\u5730\u7aef\u4fee\u6539 git stash #\u4fdd\u5b58\u672c\u5730\u7aef\u4fee\u6539 git pull --rebase #\u62c9\u53d6\u9060\u7aef git stash pop #\u9084\u539f\u672c\u5730\u7aef\u4fee\u6539 \u4fee\u6539commit\u8a0a\u606f \u5982\u679c\u662f\u8981\u4fee\u6539\u5df2\u7d93push\u4e0a\u53bb\u7684commit message\uff0c\u9700\u8981\u7528rebase\u7684\u65b9\u5f0f\u4fee\u6539 Ref git rebase -i head~N #N\u70ba\u8981\u4fee\u6539\u7684commit\u8a0a\u606f \u800c\u4fee\u6539\u7576\u524d\u8a0a\u606f\uff0c\u50c5\u9700\u8981\u7528 --amend \u4fee\u6539\u5373\u53ef git commit --amend -m \"New commit message.\" note python3 adas-build/scripts/generate_ota_list_V3J_v2.0.py -o ./out/ -O MD.tar.xz -S SD.tar.xz -g -c ## SAIL /data/ota_tools/sail_updater -r 2 -f /data/SAIL_IMG/sailsw1.elf -i SAIL_SW1 python -m pdb /data/ota_tools/Flash_SAIL.py -P /data/ -S V3H__SD.tar.xz","title":"Useful Command"},{"location":"Useful_Command/#memory-monitor-command","text":"Note that Linux likes to use any extra memory to cache hard drive blocks. So you don't want to look at just the free Mem. You want to look at the free column of the -/+ buffers/cache: row. This shows how much memory is available to applications. So I just ran free -m and got this: watch -n 5 free -m Reminder : To stop this watch cycle you can just press Ctrl+C. The watch command can be also used for monitoring other data with time update","title":"Memory monitor command"},{"location":"Useful_Command/#process-namepid","text":"ps listed every process that is running ps aux | grep <program name> with pgrep and pidof, it will only return PID of the program name pgrep <program_name> pidof <program_name> It can also reach by program itself","title":"Process name(PID)"},{"location":"Useful_Command/#c-code","text":"#include <stdio.h> #include <unistd.h> int main() { pid_t pid = getpid(); printf(\"The PID of this process is: %d\\n\", pid); return 0; }","title":"c code"},{"location":"Useful_Command/#python","text":"import os pid = os.getpid() print(f\"The PID of this process is: {pid}\") We can write it to a script also. #!/bin/bash # \u555f\u52d5\u7a0b\u5e8f\u4e26\u5c07\u5176\u653e\u5165\u5f8c\u53f0 ./my_program & # \u7372\u53d6\u5f8c\u53f0\u9032\u7a0b\u7684 PID PID=$! echo \"The PID of my_program is: $PID\"","title":"python"},{"location":"Useful_Command/#process-info-in-linux","text":"Files located in /proc/[pid]/ provides tons of information about process including kernel content, complete docs can be found here The directory /proc contains (among other things) one subdirectory for each process running on the system, which is named after the process ID (PID). if there is any doubt, review the kernel documentation in the directory /usr/src/linux/Documentation.","title":"Process Info in Linux"},{"location":"Useful_Command/#status","text":"overview of process information, such as virtual memory, code and heap...so on cat /proc/[pid]/status # \u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/status This shows you nearly the same information you would get if you viewed it with the ps command. In fact, ps uses the proc file system to obtain its information. But you get a more detailed view of the process by reading the file /proc/PID/status.","title":"status"},{"location":"Useful_Command/#maps","text":"further information about memory mapping, address range...so on The /proc/PID/maps file contains the currently mapped memory regions and their access permissions. cat /proc/[pid]/maps #\u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/maps","title":"maps"},{"location":"Useful_Command/#smaps","text":"much further information about each memory location of info, RSS(Resident Set Size), PSS(Proportional Set Size)...so on The /proc/PID/smaps is an extension based on maps, showing the memory consumption for each of the process's mappings. cat /proc/[pid]/smaps #\u6bcf0.5\u79d2\u66f4\u65b0\u4e00\u6b21\u6578\u64da watch -n 0.5 cat /proc/[pid]/smaps Like before, we can also write sript for automation, this time it's done by using python script","title":"smaps"},{"location":"Useful_Command/#vs-code","text":"ctrl + shift + del : clear terminal","title":"VS Code"},{"location":"Useful_Command/#ssh","text":"","title":"ssh"},{"location":"Useful_Command/#scp","text":"copy files between ssh server and client ```sh","title":"scp"},{"location":"Useful_Command/#_1","text":"scp /path/file1 user@192.168.0.1:/path/file2 sh","title":"\u5f9e\u672c\u5730\u7aef\u8907\u88fd\u5230\u9060\u7aef"},{"location":"Useful_Command/#_2","text":"scp user@192.168.0.1:/path/file2 /path/file1 `` -r : \u8907\u88fd\u6574\u500b\u76ee\u9304 -p : \u4fdd\u7559\u6a94\u6848\u6642\u9593\u8207\u6b0a\u9650 -c` : \u8cc7\u6599\u58d3\u7e2e","title":"\u5f9e\u9060\u7aef\u8907\u88fd\u5230\u672c\u5730\u7aef"},{"location":"Useful_Command/#git","text":"\u62c9\u9060\u7aef\u7684branch, \u53c8\u60f3\u4fdd\u5b58\u672c\u5730\u7aef\u4fee\u6539 git stash #\u4fdd\u5b58\u672c\u5730\u7aef\u4fee\u6539 git pull --rebase #\u62c9\u53d6\u9060\u7aef git stash pop #\u9084\u539f\u672c\u5730\u7aef\u4fee\u6539 \u4fee\u6539commit\u8a0a\u606f \u5982\u679c\u662f\u8981\u4fee\u6539\u5df2\u7d93push\u4e0a\u53bb\u7684commit message\uff0c\u9700\u8981\u7528rebase\u7684\u65b9\u5f0f\u4fee\u6539 Ref git rebase -i head~N #N\u70ba\u8981\u4fee\u6539\u7684commit\u8a0a\u606f \u800c\u4fee\u6539\u7576\u524d\u8a0a\u606f\uff0c\u50c5\u9700\u8981\u7528 --amend \u4fee\u6539\u5373\u53ef git commit --amend -m \"New commit message.\" note python3 adas-build/scripts/generate_ota_list_V3J_v2.0.py -o ./out/ -O MD.tar.xz -S SD.tar.xz -g -c ## SAIL /data/ota_tools/sail_updater -r 2 -f /data/SAIL_IMG/sailsw1.elf -i SAIL_SW1 python -m pdb /data/ota_tools/Flash_SAIL.py -P /data/ -S V3H__SD.tar.xz","title":"git"},{"location":"C/C%2B%2B/Compile/","text":"GCC and G++ \u00b6 docs * -x : \u8a2d\u5b9a\u6587\u4ef6\u4f7f\u7528\u7684\u8a9e\u8a00(\u526f\u6a94\u540d) * -c : \u53eacompile\u4e26\u5c07assembly\u8f38\u51fa\u76ee\u6a19\u6a94\u81f3.obj, \u6c92\u6709link * -s : \u53eacompile\u4e26\u8f38\u51fa\u6210assembly * -o <file> : compile, assembly\u8ddflinking\u5b8c\u6210\u5f8c\u8f38\u51fa\u76ee\u6a19\u6a94\u81f3file * -v : \u5370\u51fa\u7de8\u8b6f\u7684\u8cc7\u8a0a * -### : \u8207 -v \u985e\u4f3c\uff0c\u4f46\u53ea\u8f38\u51fa\u8ddf\u6587\u6578\u5b57\u6709\u95dc\u7684\u8cc7\u8a0a * -l -L < library > \u5728linking\u968e\u6bb5\u5c0b\u627e library * -e entry \u6307\u5b9a\u7a0b\u5f0f\u5f9eentry\u4f5c\u70ba\u8f38\u5165\u9ede * -pthread link POSIX\u5167\u7684thread library (\u53ea\u652f\u63f4GNU/Linux\u7cfb\u7d71) gtest\u7684default\u5fc5\u9808\u8981\u52a0\uff0c\u5426\u5247\u5728compile gtest\u7684sample code\u6642\u5c31\u5fc5\u9808\u8981\u66f4\u6539\u74b0\u5883\u8b8a\u6578 * -static \u5728\u652f\u63f4\u52d5\u614blinking\u7684\u7cfb\u7d71\u4e0a\uff0c\u6307\u5b9a\u975c\u614b\u9023\u7d50 * -shared \u8f38\u51fa\u80fd\u5920\u88ab\u5176\u4ed6object\u52d5\u614blinking\u7684share object CMake \u00b6 gcc/g++ \u592a\u9ebb\u7169\u4e14\u4e0d\u597d\u7ba1\u7406\uff0c\u7528CMakeLists\u4e00\u6b21\u5efa\u7acbbuild environment \u7bc4\u4f8b\u6846\u67b6 \u00b6 cmake_minimum_required(VERSION 3.16) # CMake_\u6700\u4f4e\u7248\u672c_\u9700\u6c42 project(\"Hello World\") # \u5efa\u7acb\u4e00\u500bCMake\u5c08\u6848\uff0c\u4e26\u7d66\u4e88\u5c08\u6848\u540d\u7a31 add_executable(hello-world) # \u5efa\u7acb\u4e00\u500bCMake\u76ee\u6a19\uff0c\u76ee\u6a19\u70ba\u53ef\u57f7\u884c\u6a94 target_sources(hello-world PRIVATE \"main.cpp\") # \u6307\u5b9a\u5efa\u7f6e\u8a72CMake\u76ee\u6a19\u6642\u6240\u4f7f\u7528\u7684\u4f86\u6e90\u6a94\u6848 \u57f7\u884c \u00b6 add_executable() : \u5efa\u7acb\u53ef\u57f7\u884c\u6a94 target_source() : \u6307\u5b9aCMake\u4f7f\u7528\u7684\u4f86\u6e90\u6a94\u6848\uff0c\u4e0d\u9700\u5305\u542b\u6a19\u982d\u6a94 target_sources(project_name, PRIVATE \"main.cpp\" \"func1.cpp\" \"fun2.cpp\") \u975c\u614b\u51fd\u5f0f\u5eab\u9023\u7d50 \u00b6 target_include_directories() : \u65b0\u589e\u76ee\u6a19\u7684include\u76ee\u9304 target_link_libraries() : \u65b0\u589e\u76ee\u6a19\u7684\u975c\u614b\u51fd\u5f0f\u5eab add_subdirectory() : \u5c07\u6307\u5b9a\u8cc7\u6599\u593e\u5167\u7684CMake\u5c08\u6848\u4e00\u8d77\u52a0\u5165\u5efa\u7f6e # \u65b0\u589e\u76ee\u6a19 project-02 \u7684 Include \u76ee\u9304 target_include_directories(project-02 PRIVATE \"libstatic1/\" ) # \u5c07\u6307\u5b9a\u8cc7\u6599\u593e\u7684 CMake \u5c08\u6848\uff08\u542b\u6709 CMakeLists.txt\uff09\u4e00\u8d77\u52a0\u5165\u5efa\u7f6e\u3002 add_subdirectory(\"libstatic1/\") # \u65b0\u589e\u76ee\u6a19 project-02 \u6240\u9023\u7d50\u7684\u51fd\u5f0f\u5eab\u3002\u51fd\u5f0f\u5eab\u540d\u7a31\u70ba\u5176\u4ed6 CMake \u5c08\u6848\u7684\u76ee\u6a19\u540d\u7a31\u3002\u901a\u5e38\u4f86\u81ea # find_package \u6216 add_subdirectory\u3002\u4ee5\u9019\u500b\u7bc4\u4f8b\u4f86\u8aaa\uff0clibstatic1 \u51fd\u5f0f\u5eab\u662f\u4f86\u81ea # add_subdirectory \u6307\u4ee4\u6240\u52a0\u5165\u7684 CMake \u5c08\u6848\u3002 target_link_libraries(project-02 PRIVATE libstatic1 ) libstatic1/CMakeLists.txt # \u65b0\u589e\u4e00\u500b CMake \u76ee\u6a19\uff0c\u76ee\u6a19\u578b\u614b\u70ba\u975c\u614b\u51fd\u5f0f\u5eab\u3002 add_library(libstatic1 STATIC) target_sources(libstatic1 PRIVATE \"f1.cpp\" \"f2.cpp\" ) \u52d5\u614b\u51fd\u5f0f\u5eab\u9023\u7d50 \u00b6 add_library() : \u7531\u8def\u5f91\u641c\u7d22\u51fd\u5f0f\u5eab add_library(mylibrary SHARED src/mylibrary.cpp): # \u6307\u5b9a\u751f\u6210\u540d\u70ba mylibrary \u7684\u5171\u4eab\u5eab\uff08\u52d5\u614b\u51fd\u5f0f\u5eab\uff09\uff0c\u4e26\u5305\u542b\u6e90\u6587\u4ef6 src/mylibrary.cpp#\u3002 #----------------------- #\u82e5\u662f\u5df2\u7d93\u7de8\u8b6f\u597d\u7684.so\u6216.dll # \u8a2d\u7f6e\u5916\u90e8\u5eab\u7684\u5305\u542b\u8def\u5f91 include_directories(${CMAKE_SOURCE_DIR}/include) # \u6307\u5b9a\u5916\u90e8\u5eab\u7684\u4f4d\u7f6e set(EXTERNAL_LIB_PATH ${CMAKE_SOURCE_DIR}/lib) # \u67e5\u627e\u52d5\u614b\u5eab find_library(EXTERNAL_LIB NAMES external PATHS ${EXTERNAL_LIB_PATH}) # \u9023\u7d50\u5916\u90e8\u52d5\u614b\u51fd\u5f0f\u5eab target_link_libraries(MyExecutable ${EXTERNAL_LIB}) Debug in vscode \u00b6 \u4f7f\u7528gdb\u7de8\u8b6f\u55ae\u500b\u6587\u4ef6\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bconfiguration \u53c3\u8003\u8cc7\u6599 docs task.json { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"shell\", \"label\": \"C/C++: g++ build active file\", \"command\": \"/usr/bin/g++\", \"args\": [\"-g\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\"], \"options\": { \"cwd\": \"/usr/bin\" }, \"problemMatcher\": [\"$gcc\"], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"detail\": \"Task generated by Debugger.\" } ] } launch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"C/C++: g++ build and debug active file\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${fileDirname}/${fileBasenameNoExtension}\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": false, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"/usr/bin/gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ], \"preLaunchTask\": \"C/C++: g++ build active file\" } ] } CmakeList.txt \u00b6 \u5c07launch.json\u5167\u7684configuratiion\u4ee5cppdbg\u8207gdb\u5c31\u80fd\u5229\u7528cmake\u53bb\u8a2d\u65b7\u9edeDebug\u4e86\uff0c\u53c3\u8003\u6b64\u6587\u4ef6\uff1a here { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"(gdb) Launch\", \"type\": \"cppdbg\", \"request\": \"launch\", // Resolved by CMake Tools: \"program\": \"${command:cmake.launchTargetPath}\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [ { // add the directory where our target was built to the PATHs // it gets resolved by CMake Tools: \"name\": \"PATH\", \"value\": \"${env:PATH}:${command:cmake.getLaunchTargetDirectory}\" }, { \"name\": \"OTHER_VALUE\", \"value\": \"Something something\" } ], \"externalConsole\": true, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ] } ] } \u82e5\u60f3\u8981\u50b3\u905e\u53c3\u6578\u81f3cmake, \u9700\u8981\u5728task.json\u5167\u589e\u52a0configuration\u7684code block { \"label\": \"configure\", \"type\": \"shell\", \"command\": \"cmake\", \"args\": [ \"-S\", \".\", // \u6307\u5b9a\u6e90\u76ee\u5f55 \"-B\", \"build\", // \u6307\u5b9a\u6784\u5efa\u76ee\u5f55 \"-DUNIT_TESTS=1\", ], \"group\": { \"kind\": \"build\", \"isDefault\": true, }, \"problemMatcher\": [\"$gcc\"], \"detail\": \"configure cmake project.\" } { // in build section, add this line \"dependsOn\": [ \"configure\" ], } task.json\u7684\u8a73\u7d30\u8a2d\u5b9a\u53ef\u4ee5\u5728\u9019\u88e1\u627e\u5230 : link Makefile \u00b6 common compile method in GNU/Linux, a common makefile will look like this, every command line should started with a tab TARGET : PREREQUISITES COMMAND ... ... Example simple #sample Makefile edit : main.o kdb.o command.o display.o \\ insert.o search.o main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.c defs.h command.h cc -c command.o . . .","title":"Details"},{"location":"C/C%2B%2B/Compile/#gcc-and-g","text":"docs * -x : \u8a2d\u5b9a\u6587\u4ef6\u4f7f\u7528\u7684\u8a9e\u8a00(\u526f\u6a94\u540d) * -c : \u53eacompile\u4e26\u5c07assembly\u8f38\u51fa\u76ee\u6a19\u6a94\u81f3.obj, \u6c92\u6709link * -s : \u53eacompile\u4e26\u8f38\u51fa\u6210assembly * -o <file> : compile, assembly\u8ddflinking\u5b8c\u6210\u5f8c\u8f38\u51fa\u76ee\u6a19\u6a94\u81f3file * -v : \u5370\u51fa\u7de8\u8b6f\u7684\u8cc7\u8a0a * -### : \u8207 -v \u985e\u4f3c\uff0c\u4f46\u53ea\u8f38\u51fa\u8ddf\u6587\u6578\u5b57\u6709\u95dc\u7684\u8cc7\u8a0a * -l -L < library > \u5728linking\u968e\u6bb5\u5c0b\u627e library * -e entry \u6307\u5b9a\u7a0b\u5f0f\u5f9eentry\u4f5c\u70ba\u8f38\u5165\u9ede * -pthread link POSIX\u5167\u7684thread library (\u53ea\u652f\u63f4GNU/Linux\u7cfb\u7d71) gtest\u7684default\u5fc5\u9808\u8981\u52a0\uff0c\u5426\u5247\u5728compile gtest\u7684sample code\u6642\u5c31\u5fc5\u9808\u8981\u66f4\u6539\u74b0\u5883\u8b8a\u6578 * -static \u5728\u652f\u63f4\u52d5\u614blinking\u7684\u7cfb\u7d71\u4e0a\uff0c\u6307\u5b9a\u975c\u614b\u9023\u7d50 * -shared \u8f38\u51fa\u80fd\u5920\u88ab\u5176\u4ed6object\u52d5\u614blinking\u7684share object","title":"GCC and G++"},{"location":"C/C%2B%2B/Compile/#cmake","text":"gcc/g++ \u592a\u9ebb\u7169\u4e14\u4e0d\u597d\u7ba1\u7406\uff0c\u7528CMakeLists\u4e00\u6b21\u5efa\u7acbbuild environment","title":"CMake"},{"location":"C/C%2B%2B/Compile/#_1","text":"cmake_minimum_required(VERSION 3.16) # CMake_\u6700\u4f4e\u7248\u672c_\u9700\u6c42 project(\"Hello World\") # \u5efa\u7acb\u4e00\u500bCMake\u5c08\u6848\uff0c\u4e26\u7d66\u4e88\u5c08\u6848\u540d\u7a31 add_executable(hello-world) # \u5efa\u7acb\u4e00\u500bCMake\u76ee\u6a19\uff0c\u76ee\u6a19\u70ba\u53ef\u57f7\u884c\u6a94 target_sources(hello-world PRIVATE \"main.cpp\") # \u6307\u5b9a\u5efa\u7f6e\u8a72CMake\u76ee\u6a19\u6642\u6240\u4f7f\u7528\u7684\u4f86\u6e90\u6a94\u6848","title":"\u7bc4\u4f8b\u6846\u67b6"},{"location":"C/C%2B%2B/Compile/#_2","text":"add_executable() : \u5efa\u7acb\u53ef\u57f7\u884c\u6a94 target_source() : \u6307\u5b9aCMake\u4f7f\u7528\u7684\u4f86\u6e90\u6a94\u6848\uff0c\u4e0d\u9700\u5305\u542b\u6a19\u982d\u6a94 target_sources(project_name, PRIVATE \"main.cpp\" \"func1.cpp\" \"fun2.cpp\")","title":"\u57f7\u884c"},{"location":"C/C%2B%2B/Compile/#_3","text":"target_include_directories() : \u65b0\u589e\u76ee\u6a19\u7684include\u76ee\u9304 target_link_libraries() : \u65b0\u589e\u76ee\u6a19\u7684\u975c\u614b\u51fd\u5f0f\u5eab add_subdirectory() : \u5c07\u6307\u5b9a\u8cc7\u6599\u593e\u5167\u7684CMake\u5c08\u6848\u4e00\u8d77\u52a0\u5165\u5efa\u7f6e # \u65b0\u589e\u76ee\u6a19 project-02 \u7684 Include \u76ee\u9304 target_include_directories(project-02 PRIVATE \"libstatic1/\" ) # \u5c07\u6307\u5b9a\u8cc7\u6599\u593e\u7684 CMake \u5c08\u6848\uff08\u542b\u6709 CMakeLists.txt\uff09\u4e00\u8d77\u52a0\u5165\u5efa\u7f6e\u3002 add_subdirectory(\"libstatic1/\") # \u65b0\u589e\u76ee\u6a19 project-02 \u6240\u9023\u7d50\u7684\u51fd\u5f0f\u5eab\u3002\u51fd\u5f0f\u5eab\u540d\u7a31\u70ba\u5176\u4ed6 CMake \u5c08\u6848\u7684\u76ee\u6a19\u540d\u7a31\u3002\u901a\u5e38\u4f86\u81ea # find_package \u6216 add_subdirectory\u3002\u4ee5\u9019\u500b\u7bc4\u4f8b\u4f86\u8aaa\uff0clibstatic1 \u51fd\u5f0f\u5eab\u662f\u4f86\u81ea # add_subdirectory \u6307\u4ee4\u6240\u52a0\u5165\u7684 CMake \u5c08\u6848\u3002 target_link_libraries(project-02 PRIVATE libstatic1 ) libstatic1/CMakeLists.txt # \u65b0\u589e\u4e00\u500b CMake \u76ee\u6a19\uff0c\u76ee\u6a19\u578b\u614b\u70ba\u975c\u614b\u51fd\u5f0f\u5eab\u3002 add_library(libstatic1 STATIC) target_sources(libstatic1 PRIVATE \"f1.cpp\" \"f2.cpp\" )","title":"\u975c\u614b\u51fd\u5f0f\u5eab\u9023\u7d50"},{"location":"C/C%2B%2B/Compile/#_4","text":"add_library() : \u7531\u8def\u5f91\u641c\u7d22\u51fd\u5f0f\u5eab add_library(mylibrary SHARED src/mylibrary.cpp): # \u6307\u5b9a\u751f\u6210\u540d\u70ba mylibrary \u7684\u5171\u4eab\u5eab\uff08\u52d5\u614b\u51fd\u5f0f\u5eab\uff09\uff0c\u4e26\u5305\u542b\u6e90\u6587\u4ef6 src/mylibrary.cpp#\u3002 #----------------------- #\u82e5\u662f\u5df2\u7d93\u7de8\u8b6f\u597d\u7684.so\u6216.dll # \u8a2d\u7f6e\u5916\u90e8\u5eab\u7684\u5305\u542b\u8def\u5f91 include_directories(${CMAKE_SOURCE_DIR}/include) # \u6307\u5b9a\u5916\u90e8\u5eab\u7684\u4f4d\u7f6e set(EXTERNAL_LIB_PATH ${CMAKE_SOURCE_DIR}/lib) # \u67e5\u627e\u52d5\u614b\u5eab find_library(EXTERNAL_LIB NAMES external PATHS ${EXTERNAL_LIB_PATH}) # \u9023\u7d50\u5916\u90e8\u52d5\u614b\u51fd\u5f0f\u5eab target_link_libraries(MyExecutable ${EXTERNAL_LIB})","title":"\u52d5\u614b\u51fd\u5f0f\u5eab\u9023\u7d50"},{"location":"C/C%2B%2B/Compile/#debug-in-vscode","text":"\u4f7f\u7528gdb\u7de8\u8b6f\u55ae\u500b\u6587\u4ef6\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bconfiguration \u53c3\u8003\u8cc7\u6599 docs task.json { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"shell\", \"label\": \"C/C++: g++ build active file\", \"command\": \"/usr/bin/g++\", \"args\": [\"-g\", \"${file}\", \"-o\", \"${fileDirname}/${fileBasenameNoExtension}\"], \"options\": { \"cwd\": \"/usr/bin\" }, \"problemMatcher\": [\"$gcc\"], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"detail\": \"Task generated by Debugger.\" } ] } launch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"C/C++: g++ build and debug active file\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${fileDirname}/${fileBasenameNoExtension}\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": false, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"/usr/bin/gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ], \"preLaunchTask\": \"C/C++: g++ build active file\" } ] }","title":"Debug in vscode"},{"location":"C/C%2B%2B/Compile/#cmakelisttxt","text":"\u5c07launch.json\u5167\u7684configuratiion\u4ee5cppdbg\u8207gdb\u5c31\u80fd\u5229\u7528cmake\u53bb\u8a2d\u65b7\u9edeDebug\u4e86\uff0c\u53c3\u8003\u6b64\u6587\u4ef6\uff1a here { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"(gdb) Launch\", \"type\": \"cppdbg\", \"request\": \"launch\", // Resolved by CMake Tools: \"program\": \"${command:cmake.launchTargetPath}\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [ { // add the directory where our target was built to the PATHs // it gets resolved by CMake Tools: \"name\": \"PATH\", \"value\": \"${env:PATH}:${command:cmake.getLaunchTargetDirectory}\" }, { \"name\": \"OTHER_VALUE\", \"value\": \"Something something\" } ], \"externalConsole\": true, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ] } ] } \u82e5\u60f3\u8981\u50b3\u905e\u53c3\u6578\u81f3cmake, \u9700\u8981\u5728task.json\u5167\u589e\u52a0configuration\u7684code block { \"label\": \"configure\", \"type\": \"shell\", \"command\": \"cmake\", \"args\": [ \"-S\", \".\", // \u6307\u5b9a\u6e90\u76ee\u5f55 \"-B\", \"build\", // \u6307\u5b9a\u6784\u5efa\u76ee\u5f55 \"-DUNIT_TESTS=1\", ], \"group\": { \"kind\": \"build\", \"isDefault\": true, }, \"problemMatcher\": [\"$gcc\"], \"detail\": \"configure cmake project.\" } { // in build section, add this line \"dependsOn\": [ \"configure\" ], } task.json\u7684\u8a73\u7d30\u8a2d\u5b9a\u53ef\u4ee5\u5728\u9019\u88e1\u627e\u5230 : link","title":"CmakeList.txt"},{"location":"C/C%2B%2B/Compile/#makefile","text":"common compile method in GNU/Linux, a common makefile will look like this, every command line should started with a tab TARGET : PREREQUISITES COMMAND ... ... Example simple #sample Makefile edit : main.o kdb.o command.o display.o \\ insert.o search.o main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.c defs.h command.h cc -c command.o . . .","title":"Makefile"},{"location":"C/C%2B%2B/basic/","text":"Include path \u00b6 #include <header> : Angle Brackets This form is typically used for including standard library headers or headers provided by the compiler. The compiler searches for the header file in the standard system directories. #include <iostream> #include <vector> #include \"header\" : Double Quotes This form is used for including user-defined headers or headers that are part of the project. The compiler searches for the header file first in the current directory and then in the standard system directories if not found. #include \"myheader.h\" #include \"utils/functions.h\" Example: \u00b6 Let's say you have a user-defined header file named myheader.h and a standard library header file named iostream . You can include them as follows: // Including a user-defined header with double quotes #include \"myheader.h\" // Including a standard library header with angle brackets #include <iostream> enum \u00b6 usage enum fruit { apple, banana, lemon, mango, orange }","title":"Introduction"},{"location":"C/C%2B%2B/basic/#include-path","text":"#include <header> : Angle Brackets This form is typically used for including standard library headers or headers provided by the compiler. The compiler searches for the header file in the standard system directories. #include <iostream> #include <vector> #include \"header\" : Double Quotes This form is used for including user-defined headers or headers that are part of the project. The compiler searches for the header file first in the current directory and then in the standard system directories if not found. #include \"myheader.h\" #include \"utils/functions.h\"","title":"Include path"},{"location":"C/C%2B%2B/basic/#example","text":"Let's say you have a user-defined header file named myheader.h and a standard library header file named iostream . You can include them as follows: // Including a user-defined header with double quotes #include \"myheader.h\" // Including a standard library header with angle brackets #include <iostream>","title":"Example:"},{"location":"C/C%2B%2B/basic/#enum","text":"usage enum fruit { apple, banana, lemon, mango, orange }","title":"enum"},{"location":"Linux%20Shell%20Script/File_System/","text":"Linux File System \u00b6 \u5b89\u5168\u6027 \u00b6 /etc/passwd : \u7528\u6236UID\u8a0a\u606f /etc/shadow : \u7528\u6236\u7d00\u9304 ext : extended file system","title":"File System"},{"location":"Linux%20Shell%20Script/File_System/#linux-file-system","text":"","title":"Linux File System"},{"location":"Linux%20Shell%20Script/File_System/#_1","text":"/etc/passwd : \u7528\u6236UID\u8a0a\u606f /etc/shadow : \u7528\u6236\u7d00\u9304 ext : extended file system","title":"\u5b89\u5168\u6027"},{"location":"Linux%20Shell%20Script/What_Is_apt/","text":"APT \u547d\u4ee4(Advanced package tool) \u00b6 for Debian, \u5982\u679c\u4f7f\u7528RedHat\u76f8\u95dc\uff0c\u6703\u4f7f\u7528 yum , zypper \u8207 dnf dpkg \u547d\u4ee4\u9700\u8981\u5c07 .deb \u5305\u6587\u4ef6\u4e0b\u8f09\u81f3\u672c\u5730\uff0c\u6216\u662f\u4ee5URL\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4f46\u901a\u5e38\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u66f4\u9858\u610f\u4f7f\u7528Linux\u767c\u884c\u7248\u5b89\u88dd\u8edf\u9ad4\u5305 apt\u9ed8\u8a8d\u4f4d\u7f6e\u662f\u5728\u5b89\u88ddlinux\u6642\u6c7a\u5b9a\u7684\uff0c\u5009\u5eab\u4f4d\u7f6e\u4fdd\u5b58\u65bc /etc/apt/sources.list \uff0c\u6b63\u5e38\u60c5\u6cc1\u4e0b\u4e0d\u9700\u8981\u4fee\u6539\u6587\u4ef6 * \u6587\u4ef6\u5167\u4f7f\u7528\u4e0b\u5217\u7d50\u69cb\u4f86\u6307\u5b9a\u5009\u5eab deb (or deb-src) address distribution_name package_type_list * deb\uff1a\u8edf\u9ad4\u985e\u578b * address\uff1a\u8edf\u9ad4\u5009\u5eab\u7684\u7db2\u5740 * distribution_name\uff1a\u8edf\u9ad4\u5009\u5eab\u767c\u884c\u7248\u7684\u540d\u7a31 * package_type_list\uff1a\u8868\u660e\u5009\u5eab\u88e1\u6709\u8edf\u9ad4\u5305 * dpkg \u82e5\u9700\u8981\u7372\u5f97\u8207\u7279\u5b9a\u8edf\u9ad4\u5305\u76f8\u95dc\u7684\u6240\u6709\u6587\u4ef6\uff0c\u9700\u8981\u4f7f\u7528 dpkg \u547d\u4ee4 \u4f8b\u5982\uff0c\u4e0b\u9762\u9019\u500b\u547d\u4ee4\u53ef\u4ee5\u5217\u51fa acl \u5b89\u88dd\u7684\u6240\u6709\u6587\u4ef6 ShellSession $ dpkg -L acl apt \u7684\u57fa\u672c\u547d\u4ee4\u683c\u5f0f\u5982\u4e0b apt-cache apt-get apt ShellSession $ apt [options] command * list \uff1a\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684\u8edf\u9ad4\u5305\uff0c\u82e5\u518d\u52a0\u5165 --installed \uff0c\u5c31\u53ef\u4ee5\u9650\u5236\u8f38\u51fa\u5df2\u5b89\u88dd\u5728\u7cfb\u7d71\u4e0a\u7684\u8edf\u9ad4 * show \uff1a\u986f\u793a\u8a73\u7d30\u8a0a\u606f * search \uff1a\u5c0b\u627e\u7279\u5b9a\u7684\u8edf\u9ad4\u5305\uff0c\u5982\u53ea\u60f3\u6309\u540d\u7a31\u641c\u5c0b\uff0c\u53ef\u4ee5\u52a0\u5165 --names-only * install \uff1a\u5b89\u88dd\u8edf\u9ad4\u5305 * upgrade \uff1a\u7576\u6709\u65b0\u8edf\u9ad4\u5305\u6642\uff0c\u5347\u7d1a\u7cfb\u7d71\u5167\u7684\u6240\u6709\u8edf\u9ad4\u5305 > upgrade\u5728\u5347\u7d1a\u904e\u7a0b\u4e0d\u6703\u522a\u9664\u4efb\u4f55\u8edf\u9ad4\u5305\uff0c\u82e5\u9700\u8981\u522a\u9664\u8edf\u9ad4\u5305\u624d\u80fd\u5b8c\u6210\u5347\u7d1a\uff0c\u53ef\u4ee5\u4f7f\u7528 apt full-upgrade * remove \uff1a\u79fb\u9664\u8edf\u9ad4\u5305 * purge \uff1a\u79fb\u9664\u8edf\u9ad4\u5305\u8207\u76f8\u95dc\u6578\u64da\u3001\u8a2d\u7f6e\u6587\u4ef6 * autoremove \uff1a\u5c07\u6709\u4f9d\u8cf4\u95dc\u4fc2\u7684\u8edf\u9ad4\u5305\u4e00\u4f75\u522a\u9664 \u5bb9\u5668 \u00b6 snap \uff1a \u00b6 snap\u6253\u5305\u7cfb\u7d71\u6703\u5c07\u61c9\u7528\u7a0b\u5f0f\u6240\u9700\u7684\u6240\u6709\u6587\u4ef6\u96c6\u4e2d\u5230\u55ae\u500bsnap\u5206\u767c\u6587\u4ef6 ShellSession $ snap [command] version \uff1asnap\u7248\u672c list \uff1a\u67e5\u770b\u5df2\u5b89\u88dd\u7684snap\u61c9\u7528\u7a0b\u5f0f find \uff1a\u5c0b\u627e\u7279\u5b9a\u7a0b\u5f0f info \uff1a\u67e5\u770bsnap\u61c9\u7528\u7a0b\u5f0f remove \uff1a\u522a\u9664\u7279\u5b9asnap \u5f9e\u539f\u4ee3\u78bc\u5b89\u88dd \u00b6 \u5f9e`tar`\u547d\u4ee4\u5275\u5efa\u51fa\u7684\u6587\u4ef6\u901a\u5e38\u88ab\u7a31\u70ba`tarball` \u4e0b\u8f09\u539f\u4ee3\u78bc <package>.tar.xz \u89e3\u58d3\u7e2e tar -Jxvf <package>.tar.xz \u9032\u5165\u76ee\u9304 cd \u4f9d\u7167 README \u6216 INSTALL \u6587\u4ef6\u9032\u884c\u5b89\u88dd","title":"What Is apt"},{"location":"Linux%20Shell%20Script/What_Is_apt/#apt-advanced-package-tool","text":"for Debian, \u5982\u679c\u4f7f\u7528RedHat\u76f8\u95dc\uff0c\u6703\u4f7f\u7528 yum , zypper \u8207 dnf dpkg \u547d\u4ee4\u9700\u8981\u5c07 .deb \u5305\u6587\u4ef6\u4e0b\u8f09\u81f3\u672c\u5730\uff0c\u6216\u662f\u4ee5URL\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4f46\u901a\u5e38\u60c5\u6cc1\u4e0b\uff0c\u6211\u5011\u66f4\u9858\u610f\u4f7f\u7528Linux\u767c\u884c\u7248\u5b89\u88dd\u8edf\u9ad4\u5305 apt\u9ed8\u8a8d\u4f4d\u7f6e\u662f\u5728\u5b89\u88ddlinux\u6642\u6c7a\u5b9a\u7684\uff0c\u5009\u5eab\u4f4d\u7f6e\u4fdd\u5b58\u65bc /etc/apt/sources.list \uff0c\u6b63\u5e38\u60c5\u6cc1\u4e0b\u4e0d\u9700\u8981\u4fee\u6539\u6587\u4ef6 * \u6587\u4ef6\u5167\u4f7f\u7528\u4e0b\u5217\u7d50\u69cb\u4f86\u6307\u5b9a\u5009\u5eab deb (or deb-src) address distribution_name package_type_list * deb\uff1a\u8edf\u9ad4\u985e\u578b * address\uff1a\u8edf\u9ad4\u5009\u5eab\u7684\u7db2\u5740 * distribution_name\uff1a\u8edf\u9ad4\u5009\u5eab\u767c\u884c\u7248\u7684\u540d\u7a31 * package_type_list\uff1a\u8868\u660e\u5009\u5eab\u88e1\u6709\u8edf\u9ad4\u5305 * dpkg \u82e5\u9700\u8981\u7372\u5f97\u8207\u7279\u5b9a\u8edf\u9ad4\u5305\u76f8\u95dc\u7684\u6240\u6709\u6587\u4ef6\uff0c\u9700\u8981\u4f7f\u7528 dpkg \u547d\u4ee4 \u4f8b\u5982\uff0c\u4e0b\u9762\u9019\u500b\u547d\u4ee4\u53ef\u4ee5\u5217\u51fa acl \u5b89\u88dd\u7684\u6240\u6709\u6587\u4ef6 ShellSession $ dpkg -L acl apt \u7684\u57fa\u672c\u547d\u4ee4\u683c\u5f0f\u5982\u4e0b apt-cache apt-get apt ShellSession $ apt [options] command * list \uff1a\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684\u8edf\u9ad4\u5305\uff0c\u82e5\u518d\u52a0\u5165 --installed \uff0c\u5c31\u53ef\u4ee5\u9650\u5236\u8f38\u51fa\u5df2\u5b89\u88dd\u5728\u7cfb\u7d71\u4e0a\u7684\u8edf\u9ad4 * show \uff1a\u986f\u793a\u8a73\u7d30\u8a0a\u606f * search \uff1a\u5c0b\u627e\u7279\u5b9a\u7684\u8edf\u9ad4\u5305\uff0c\u5982\u53ea\u60f3\u6309\u540d\u7a31\u641c\u5c0b\uff0c\u53ef\u4ee5\u52a0\u5165 --names-only * install \uff1a\u5b89\u88dd\u8edf\u9ad4\u5305 * upgrade \uff1a\u7576\u6709\u65b0\u8edf\u9ad4\u5305\u6642\uff0c\u5347\u7d1a\u7cfb\u7d71\u5167\u7684\u6240\u6709\u8edf\u9ad4\u5305 > upgrade\u5728\u5347\u7d1a\u904e\u7a0b\u4e0d\u6703\u522a\u9664\u4efb\u4f55\u8edf\u9ad4\u5305\uff0c\u82e5\u9700\u8981\u522a\u9664\u8edf\u9ad4\u5305\u624d\u80fd\u5b8c\u6210\u5347\u7d1a\uff0c\u53ef\u4ee5\u4f7f\u7528 apt full-upgrade * remove \uff1a\u79fb\u9664\u8edf\u9ad4\u5305 * purge \uff1a\u79fb\u9664\u8edf\u9ad4\u5305\u8207\u76f8\u95dc\u6578\u64da\u3001\u8a2d\u7f6e\u6587\u4ef6 * autoremove \uff1a\u5c07\u6709\u4f9d\u8cf4\u95dc\u4fc2\u7684\u8edf\u9ad4\u5305\u4e00\u4f75\u522a\u9664","title":"APT \u547d\u4ee4(Advanced package tool)"},{"location":"Linux%20Shell%20Script/What_Is_apt/#_1","text":"","title":"\u5bb9\u5668"},{"location":"Linux%20Shell%20Script/What_Is_apt/#snap","text":"snap\u6253\u5305\u7cfb\u7d71\u6703\u5c07\u61c9\u7528\u7a0b\u5f0f\u6240\u9700\u7684\u6240\u6709\u6587\u4ef6\u96c6\u4e2d\u5230\u55ae\u500bsnap\u5206\u767c\u6587\u4ef6 ShellSession $ snap [command] version \uff1asnap\u7248\u672c list \uff1a\u67e5\u770b\u5df2\u5b89\u88dd\u7684snap\u61c9\u7528\u7a0b\u5f0f find \uff1a\u5c0b\u627e\u7279\u5b9a\u7a0b\u5f0f info \uff1a\u67e5\u770bsnap\u61c9\u7528\u7a0b\u5f0f remove \uff1a\u522a\u9664\u7279\u5b9asnap","title":"snap\uff1a"},{"location":"Linux%20Shell%20Script/What_Is_apt/#_2","text":"\u5f9e`tar`\u547d\u4ee4\u5275\u5efa\u51fa\u7684\u6587\u4ef6\u901a\u5e38\u88ab\u7a31\u70ba`tarball` \u4e0b\u8f09\u539f\u4ee3\u78bc <package>.tar.xz \u89e3\u58d3\u7e2e tar -Jxvf <package>.tar.xz \u9032\u5165\u76ee\u9304 cd \u4f9d\u7167 README \u6216 INSTALL \u6587\u4ef6\u9032\u884c\u5b89\u88dd","title":"\u5f9e\u539f\u4ee3\u78bc\u5b89\u88dd"},{"location":"Linux%20Shell%20Script/command/","text":"\u63d0\u793a \u00b6 \u547d\u4ee4\u5217\u901a\u5e38\u53ef\u4ee5\u5408\u4f75\u5728\u4e00\u8d77\uff0c\u4f8b\u5982 -a \u8207 -b \u540c\u6642\u4f7f\u7528\u6642\uff0c\u53ef\u4ee5\u5beb\u4f5c -ab linux\u7684\u6a94\u6848\u7cfb\u7d71\u4f7f\u7528\u6b63\u659c\u7dda / \uff0c\u8207windows\u4f7f\u7528\u7684\u53cd\u659c\u7dda \\ \u76f8\u53cd \u547d\u4ee4\u5217 \u00b6 1. \u57fa\u790e \u00b6 man [command] \u8a2a\u554flinux\u7cfb\u7d71\u7684\u624b\u518a\uff0c\u7528\u4f86\u67e5\u627e\u547d\u4ee4\u5217\u7684\u76f8\u95dc\u8a0a\u606f cd [destination] \u76ee\u9304\u5207\u63db\uff0c\u53ef\u4ee5\u63a5\u53d7 \u7d55\u5c0d\u8def\u5f91 \u8207 \u76f8\u5c0d\u8def\u5f91 . \u55ae\u9ede\u865f\u4ee3\u8868\u7576\u524d\u76ee\u9304 .. \u96d9\u9ede\u865f\u4ee3\u8868\u7236\u76ee\u9304 pwd \u986f\u793a shell \u7684\u7576\u524d\u5de5\u4f5c\u76ee\u9304 ls \u986f\u793a\u7576\u524d\u76ee\u9304\u4e0b\u7684\u6587\u4ef6\u8207\u76ee\u9304\uff0c\u6309\u7167\u5b57\u6bcd\u6392\u5e8f LS_COLOR \u74b0\u5883\u8b8a\u91cf\u53ef\u4ee5\u63a7\u5236\u7528\u4e0d\u540c\u984f\u8272\u5340\u5206\u4e0d\u540c\u985e\u578b\u6587\u4ef6 -F \u5340\u5206\u6587\u4ef6\u8207\u76ee\u9304\uff0c\u4e26\u5728\u53ef\u57f7\u884c\u6587\u4ef6\u5f8c\u6dfb\u52a0\u661f\u865f( * ) -a \u986f\u793a\u96b1\u85cf\u6587\u4ef6 -R \u905e\u8ff4\u9078\u9805\uff0c\u5217\u51fa\u6240\u6709\u5b50\u76ee\u9304\u5167\u7684\u6587\u4ef6 -l \u986f\u793a\u9577\u5217\u8868\uff0c\u5217\u51fa\u8a73\u7d30\u8a0a\u606f \u904e\u6ffe\u5668 \u82e5\u4e0d\u77e5\u9053\u78ba\u5207\u540d\u7a31\uff0c\u53ef\u4ee5\u5c07\u904e\u6ffe\u5668\u4f5c\u70ba\u547d\u4ee4\u5217\u53c3\u6578\u57f7\u884c ? \u4ee3\u8868\u4efb\u610f\u55ae\u500b\u5b57 * \u4ee3\u8868\u96f6\u6216\u591a\u500b\u5b57 [ae] \u53ef\u80fd\u51fa\u73fe\u7684\u5169\u7a2e\u5b57\uff0c\u53ef\u4ee5\u7528\u7bc4\u570d [a-e] \u8868\u793a\u591a\u500b ; : \u53ef\u4ee5\u5728\u55ae\u884c\u5167\u57f7\u884c\u4e00\u4e32\u547d\u4ee4 sh ubuntu@ubuntu:~/CPP_Project$ pwd ; cd src ; pwd ; cd ..; pwd /home/ubuntu/CPP_Project /home/ubuntu/CPP_Project/src /home/ubuntu/CPP_Project & \u52a0\u5728\u7d50\u5c3e\uff0c\u5c07\u547d\u4ee4\u7f6e\u5165\u5f8c\u53f0\u6a21\u5f0f type \u5224\u65b7\u547d\u4ee4\u662f\u5426\u70ba\u5167\u5efa\uff0c\u82e5\u70ba\u5916\u90e8\u9700\u8981\u82b1\u8cbb\u984d\u5916\u7cfb\u7d71\u958b\u92b7 history \u8ffd\u8e64\u6700\u8fd1\u4f7f\u7528\u904e\u7684\u547d\u4ee4 alias \u547d\u4ee4\u5225\u540d\uff0c\u50c5\u5728\u5176\u88ab\u5b9a\u7fa9\u7684shell\u9032\u7a0b\u5167\u624d\u6709\u6548 2. \u6587\u4ef6\u64cd\u4f5c \u00b6 touch [file] \u5275\u5efa\u7a7a\u6587\u4ef6\uff0c\u82e5\u6587\u4ef6\u5b58\u5728\u5247\u50c5\u4fee\u6539\u6642\u9593 cp [source] [destination] \u5f9e\u4e00\u500b\u4f4d\u7f6e\u8907\u88fd\u6587\u4ef6\u5230\u53e6\u4e00\u4f4d\u7f6e > \u6ce8\u610f \uff1a\u8a18\u5f97\u5728\u76ee\u9304\u540d\u7a31\u5c3e\u90e8\u52a0\u4e0a\u6b63\u659c\u7dda( / ) -i \u8a62\u554f\u662f\u5426\u8986\u84cb\u5df2\u6709\u6587\u4ef6 -R \u8907\u88fd\u6574\u500b\u76ee\u9304 ln [target] [source] \u93c8\u7d50\u6587\u4ef6\uff0c\u5275\u5efa\u7368\u7acb\u7684\u865b\u64ec\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u539f\u59cb\u6587\u4ef6\u7684\u8a0a\u606f\u53ca\u4f4d\u7f6e -s \u8edf\u93c8\u7d50\uff0c\u6587\u4ef6\u5167\u5bb9\u5f7c\u6b64\u4e0d\u540c mv [source] [target] \u79fb\u52d5\u6587\u4ef6\u8207\u76ee\u9304\u5230\u53e6\u4e00\u4f4d\u7f6e\u6216\u91cd\u547d\u540d -i \u8a62\u554f\u662f\u5426\u8986\u84cb\u5df2\u6709\u6587\u4ef6 rm \u522a\u9664\u6587\u4ef6 -i \u8a62\u554f\u662f\u5426\u771f\u7684\u8981\u522a\u9664\u6587\u4ef6 -f \u5f37\u5236\u522a\u9664\u6587\u4ef6 mkdir \u5275\u5efa\u76ee\u9304 -p \u6279\u91cf\u5275\u5efa\u76ee\u9304\u8207\u5b50\u76ee\u9304 rmdir \u522a\u9664\u76ee\u9304\uff0c\u9ed8\u8a8d\u53ea\u522a\u9664\u7a7a\u76ee\u9304 -r \u5411\u4e0b\u9032\u5165\u76ee\u9304\uff0c\u522a\u9664\u5176\u4e2d\u7684\u6587\u4ef6 file \u63a2\u6e2c\u6587\u4ef6\u5167\u90e8\u4e26\u5224\u65b7\u6587\u4ef6\u985e\u578b cat \u986f\u793a\u6587\u4ef6\u4e2d\u6240\u6709\u6578\u64da -n \u986f\u793a\u884c\u865f -b \u50c5\u5728\u6709\u6587\u672c\u7684\u884c\u52a0\u4e0a\u884c\u865f more \u986f\u793a\u6587\u4ef6\u5167\u5bb9\uff0c\u4f46\u5728\u986f\u793a\u6bcf\u9801\u6578\u64da\u5f8c\u505c\u4e0b\u4f86 less \u8207 more \u985e\u4f3c\uff0c\u4f46\u6bd4\u4ed6\u5f37\u5927 tail \u986f\u793a\u6587\u4ef6\u6700\u5f8c\u5e7e\u884c -n \u986f\u793a n \u884c\u6578\uff0c\u9810\u8a2d\u70ba10\u884c -f \u4fdd\u6301\u6d3b\u52d5\u72c0\u614b\u4e26\u6301\u7e8c\u986f\u793a\u6dfb\u52a0\u5230\u6587\u4ef6\u7684\u5167\u5bb9\uff0c\u5be6\u6642\u76e3\u63a7log\u7684\u597d\u65b9\u5f0f head \u986f\u793a\u6587\u4ef6\u958b\u982d\u82e5\u5e72\u884c\uff0c\u6c92\u6709 -f \u9078\u9805 -n \u986f\u793a n \u884c\u6578\uff0c\u9810\u8a2d\u70ba10\u884c sort \u6392\u5e8f\u6587\u4ef6\u5167\u6578\u64da -n \u6309\u503c\u6392\u5e8f -M \u6309\u6708\u6392\u5e8f grep \u9010\u884c\u641c\u5c0b\u6307\u5b9a\u6a21\u5f0f\u7684\u6587\u672c -v \u53cd\u5411\u641c\u5c0b(\u4e0d\u5339\u914d\u7684) -n \u986f\u793a\u884c\u6578 -e \u591a\u500b\u5339\u914d gzip \u58d3\u7e2e\u6307\u5b9a\u6587\u4ef6\u81f3 .gz tar [function] [option] \u58d3\u7e2e\u8207\u6b78\u6a94\u6587\u4ef6 function -A , --concatenate \u5c07\u4e00\u500b tar \u6587\u4ef6\u8ffd\u52a0\u5230\u53e6\u4e00\u500b tar \u6587\u4ef6 -c , --create \u5275\u5efa\u65b0\u7684 tar \u6587\u4ef6 -d , --diff \u6aa2\u67e5\u6587\u4ef6\u4e0d\u540c\u4e4b\u8655 --delete \u5f9e tar \u6587\u4ef6\u4e2d\u522a\u9664\u6587\u4ef6 -r , --append \u5c07\u6587\u4ef6\u52a0\u5165 tar \u6587\u4ef6\u5167 -x \u5f9e tar \u6587\u4ef6\u4e2d\u9032\u884c\u63d0\u53d6 option -c [dir] \u5207\u63db\u5230\u6307\u5b9a\u76ee\u9304 -f [file] \u5c07\u7d50\u679c\u8f38\u51fa\u5230\u6587\u4ef6 -p \u4fdd\u7559\u6587\u4ef6\u6b0a\u9650 -v \u8655\u7406\u6587\u4ef6\u6642\u986f\u793a\u6587\u4ef6\u540d -j \u8f38\u51fa\u50b3\u7d66 bzip2 \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -J \u8f38\u51fa\u50b3\u7d66 xz \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -z \u8f38\u51fa\u50b3\u7d66 gzip \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -Z \u8f38\u51fa\u50b3\u7d66 compress \u547d\u4ee4\u9032\u884c\u58d3\u7e2e 3. \u76e3\u63a7\u7a0b\u5e8f \u00b6 ps \u8f38\u51fa\u904b\u884c\u9032\u7a0b\u7684\u8a0a\u606f -A , -e \u986f\u793a\u6240\u6709\u9032\u7a0b -N \u986f\u793a\u8207\u6307\u5b9a\u53c3\u6578\u4e0d\u7b26\u7684\u6240\u6709\u9032\u7a0b -a \u986f\u793a\u9664\u63a7\u5236(session leader)\u8207\u7121\u7d42\u7aef\u6a5f\u4ee5\u5916\u7684\u6240\u6709\u9032\u7a0b -d \u986f\u793a\u9664\u63a7\u5236\u5916\u6240\u6709\u9032\u7a0b -C [cmdlist] \u986f\u793a\u5305\u542b\u5728cmdlist\u5167\u7684\u9032\u7a0b -U [userlist] \u986f\u793a\u5728userlist\u5167\u7684\u9032\u7a0b -F \u986f\u793a\u66f4\u591a\u984d\u5916\u8f38\u51fa --forest \u986f\u793ashell\u7236\u5b50\u95dc\u4fc2 top \u5be6\u6642\u66f4\u65b0\u9032\u7a0b\u8a0a\u606f kill \u900f\u904ePID\u5411\u9032\u7a0b\u9001\u51fa\u8a0a\u865f\uff0c\u5fc5\u9808\u662f\u9032\u7a0b\u7684owner\u6216root user pkill \u4f7f\u7528\u7a0b\u5e8f\u540d\uff0c\u800c\u4e0d\u662f\u7528PID\u7d42\u6b62\u9032\u7a0b sleep \u5e0c\u671b\u9032\u7a0b\u7b49\u5f85(\u7761\u7720)\u7684\u79d2\u6578 jobs \u986f\u793a\u5c6c\u65bc\u4f60\u7684\u6240\u6709\u9032\u7a0b coproc \u751f\u6210\u5b50shell\u4e26\u5728\u5b50shell\u4e2d\u57f7\u884c\u547d\u4ee4 4. \u76e3\u6e2c\u786c\u789f \u00b6 mount \u639b\u8f09\u5132\u5b58\u8a2d\u5099 umount \u9000\u51fa\u5132\u5b58\u8a2d\u5099 df \u67e5\u770b\u639b\u8f09\u786c\u789f\u7684\u4f7f\u7528\u60c5\u6cc1 -h \u4eba\u985e\u6613\u8b80\u7684\u65b9\u5f0f\u8f38\u51fa du \u986f\u793a\u7279\u5b9a\u76ee\u9304\u7684\u4f7f\u7528\u5927\u5c0f","title":"Command"},{"location":"Linux%20Shell%20Script/command/#_1","text":"\u547d\u4ee4\u5217\u901a\u5e38\u53ef\u4ee5\u5408\u4f75\u5728\u4e00\u8d77\uff0c\u4f8b\u5982 -a \u8207 -b \u540c\u6642\u4f7f\u7528\u6642\uff0c\u53ef\u4ee5\u5beb\u4f5c -ab linux\u7684\u6a94\u6848\u7cfb\u7d71\u4f7f\u7528\u6b63\u659c\u7dda / \uff0c\u8207windows\u4f7f\u7528\u7684\u53cd\u659c\u7dda \\ \u76f8\u53cd","title":"\u63d0\u793a"},{"location":"Linux%20Shell%20Script/command/#_2","text":"","title":"\u547d\u4ee4\u5217"},{"location":"Linux%20Shell%20Script/command/#1","text":"man [command] \u8a2a\u554flinux\u7cfb\u7d71\u7684\u624b\u518a\uff0c\u7528\u4f86\u67e5\u627e\u547d\u4ee4\u5217\u7684\u76f8\u95dc\u8a0a\u606f cd [destination] \u76ee\u9304\u5207\u63db\uff0c\u53ef\u4ee5\u63a5\u53d7 \u7d55\u5c0d\u8def\u5f91 \u8207 \u76f8\u5c0d\u8def\u5f91 . \u55ae\u9ede\u865f\u4ee3\u8868\u7576\u524d\u76ee\u9304 .. \u96d9\u9ede\u865f\u4ee3\u8868\u7236\u76ee\u9304 pwd \u986f\u793a shell \u7684\u7576\u524d\u5de5\u4f5c\u76ee\u9304 ls \u986f\u793a\u7576\u524d\u76ee\u9304\u4e0b\u7684\u6587\u4ef6\u8207\u76ee\u9304\uff0c\u6309\u7167\u5b57\u6bcd\u6392\u5e8f LS_COLOR \u74b0\u5883\u8b8a\u91cf\u53ef\u4ee5\u63a7\u5236\u7528\u4e0d\u540c\u984f\u8272\u5340\u5206\u4e0d\u540c\u985e\u578b\u6587\u4ef6 -F \u5340\u5206\u6587\u4ef6\u8207\u76ee\u9304\uff0c\u4e26\u5728\u53ef\u57f7\u884c\u6587\u4ef6\u5f8c\u6dfb\u52a0\u661f\u865f( * ) -a \u986f\u793a\u96b1\u85cf\u6587\u4ef6 -R \u905e\u8ff4\u9078\u9805\uff0c\u5217\u51fa\u6240\u6709\u5b50\u76ee\u9304\u5167\u7684\u6587\u4ef6 -l \u986f\u793a\u9577\u5217\u8868\uff0c\u5217\u51fa\u8a73\u7d30\u8a0a\u606f \u904e\u6ffe\u5668 \u82e5\u4e0d\u77e5\u9053\u78ba\u5207\u540d\u7a31\uff0c\u53ef\u4ee5\u5c07\u904e\u6ffe\u5668\u4f5c\u70ba\u547d\u4ee4\u5217\u53c3\u6578\u57f7\u884c ? \u4ee3\u8868\u4efb\u610f\u55ae\u500b\u5b57 * \u4ee3\u8868\u96f6\u6216\u591a\u500b\u5b57 [ae] \u53ef\u80fd\u51fa\u73fe\u7684\u5169\u7a2e\u5b57\uff0c\u53ef\u4ee5\u7528\u7bc4\u570d [a-e] \u8868\u793a\u591a\u500b ; : \u53ef\u4ee5\u5728\u55ae\u884c\u5167\u57f7\u884c\u4e00\u4e32\u547d\u4ee4 sh ubuntu@ubuntu:~/CPP_Project$ pwd ; cd src ; pwd ; cd ..; pwd /home/ubuntu/CPP_Project /home/ubuntu/CPP_Project/src /home/ubuntu/CPP_Project & \u52a0\u5728\u7d50\u5c3e\uff0c\u5c07\u547d\u4ee4\u7f6e\u5165\u5f8c\u53f0\u6a21\u5f0f type \u5224\u65b7\u547d\u4ee4\u662f\u5426\u70ba\u5167\u5efa\uff0c\u82e5\u70ba\u5916\u90e8\u9700\u8981\u82b1\u8cbb\u984d\u5916\u7cfb\u7d71\u958b\u92b7 history \u8ffd\u8e64\u6700\u8fd1\u4f7f\u7528\u904e\u7684\u547d\u4ee4 alias \u547d\u4ee4\u5225\u540d\uff0c\u50c5\u5728\u5176\u88ab\u5b9a\u7fa9\u7684shell\u9032\u7a0b\u5167\u624d\u6709\u6548","title":"1. \u57fa\u790e"},{"location":"Linux%20Shell%20Script/command/#2","text":"touch [file] \u5275\u5efa\u7a7a\u6587\u4ef6\uff0c\u82e5\u6587\u4ef6\u5b58\u5728\u5247\u50c5\u4fee\u6539\u6642\u9593 cp [source] [destination] \u5f9e\u4e00\u500b\u4f4d\u7f6e\u8907\u88fd\u6587\u4ef6\u5230\u53e6\u4e00\u4f4d\u7f6e > \u6ce8\u610f \uff1a\u8a18\u5f97\u5728\u76ee\u9304\u540d\u7a31\u5c3e\u90e8\u52a0\u4e0a\u6b63\u659c\u7dda( / ) -i \u8a62\u554f\u662f\u5426\u8986\u84cb\u5df2\u6709\u6587\u4ef6 -R \u8907\u88fd\u6574\u500b\u76ee\u9304 ln [target] [source] \u93c8\u7d50\u6587\u4ef6\uff0c\u5275\u5efa\u7368\u7acb\u7684\u865b\u64ec\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u539f\u59cb\u6587\u4ef6\u7684\u8a0a\u606f\u53ca\u4f4d\u7f6e -s \u8edf\u93c8\u7d50\uff0c\u6587\u4ef6\u5167\u5bb9\u5f7c\u6b64\u4e0d\u540c mv [source] [target] \u79fb\u52d5\u6587\u4ef6\u8207\u76ee\u9304\u5230\u53e6\u4e00\u4f4d\u7f6e\u6216\u91cd\u547d\u540d -i \u8a62\u554f\u662f\u5426\u8986\u84cb\u5df2\u6709\u6587\u4ef6 rm \u522a\u9664\u6587\u4ef6 -i \u8a62\u554f\u662f\u5426\u771f\u7684\u8981\u522a\u9664\u6587\u4ef6 -f \u5f37\u5236\u522a\u9664\u6587\u4ef6 mkdir \u5275\u5efa\u76ee\u9304 -p \u6279\u91cf\u5275\u5efa\u76ee\u9304\u8207\u5b50\u76ee\u9304 rmdir \u522a\u9664\u76ee\u9304\uff0c\u9ed8\u8a8d\u53ea\u522a\u9664\u7a7a\u76ee\u9304 -r \u5411\u4e0b\u9032\u5165\u76ee\u9304\uff0c\u522a\u9664\u5176\u4e2d\u7684\u6587\u4ef6 file \u63a2\u6e2c\u6587\u4ef6\u5167\u90e8\u4e26\u5224\u65b7\u6587\u4ef6\u985e\u578b cat \u986f\u793a\u6587\u4ef6\u4e2d\u6240\u6709\u6578\u64da -n \u986f\u793a\u884c\u865f -b \u50c5\u5728\u6709\u6587\u672c\u7684\u884c\u52a0\u4e0a\u884c\u865f more \u986f\u793a\u6587\u4ef6\u5167\u5bb9\uff0c\u4f46\u5728\u986f\u793a\u6bcf\u9801\u6578\u64da\u5f8c\u505c\u4e0b\u4f86 less \u8207 more \u985e\u4f3c\uff0c\u4f46\u6bd4\u4ed6\u5f37\u5927 tail \u986f\u793a\u6587\u4ef6\u6700\u5f8c\u5e7e\u884c -n \u986f\u793a n \u884c\u6578\uff0c\u9810\u8a2d\u70ba10\u884c -f \u4fdd\u6301\u6d3b\u52d5\u72c0\u614b\u4e26\u6301\u7e8c\u986f\u793a\u6dfb\u52a0\u5230\u6587\u4ef6\u7684\u5167\u5bb9\uff0c\u5be6\u6642\u76e3\u63a7log\u7684\u597d\u65b9\u5f0f head \u986f\u793a\u6587\u4ef6\u958b\u982d\u82e5\u5e72\u884c\uff0c\u6c92\u6709 -f \u9078\u9805 -n \u986f\u793a n \u884c\u6578\uff0c\u9810\u8a2d\u70ba10\u884c sort \u6392\u5e8f\u6587\u4ef6\u5167\u6578\u64da -n \u6309\u503c\u6392\u5e8f -M \u6309\u6708\u6392\u5e8f grep \u9010\u884c\u641c\u5c0b\u6307\u5b9a\u6a21\u5f0f\u7684\u6587\u672c -v \u53cd\u5411\u641c\u5c0b(\u4e0d\u5339\u914d\u7684) -n \u986f\u793a\u884c\u6578 -e \u591a\u500b\u5339\u914d gzip \u58d3\u7e2e\u6307\u5b9a\u6587\u4ef6\u81f3 .gz tar [function] [option] \u58d3\u7e2e\u8207\u6b78\u6a94\u6587\u4ef6 function -A , --concatenate \u5c07\u4e00\u500b tar \u6587\u4ef6\u8ffd\u52a0\u5230\u53e6\u4e00\u500b tar \u6587\u4ef6 -c , --create \u5275\u5efa\u65b0\u7684 tar \u6587\u4ef6 -d , --diff \u6aa2\u67e5\u6587\u4ef6\u4e0d\u540c\u4e4b\u8655 --delete \u5f9e tar \u6587\u4ef6\u4e2d\u522a\u9664\u6587\u4ef6 -r , --append \u5c07\u6587\u4ef6\u52a0\u5165 tar \u6587\u4ef6\u5167 -x \u5f9e tar \u6587\u4ef6\u4e2d\u9032\u884c\u63d0\u53d6 option -c [dir] \u5207\u63db\u5230\u6307\u5b9a\u76ee\u9304 -f [file] \u5c07\u7d50\u679c\u8f38\u51fa\u5230\u6587\u4ef6 -p \u4fdd\u7559\u6587\u4ef6\u6b0a\u9650 -v \u8655\u7406\u6587\u4ef6\u6642\u986f\u793a\u6587\u4ef6\u540d -j \u8f38\u51fa\u50b3\u7d66 bzip2 \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -J \u8f38\u51fa\u50b3\u7d66 xz \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -z \u8f38\u51fa\u50b3\u7d66 gzip \u547d\u4ee4\u9032\u884c\u58d3\u7e2e -Z \u8f38\u51fa\u50b3\u7d66 compress \u547d\u4ee4\u9032\u884c\u58d3\u7e2e","title":"2. \u6587\u4ef6\u64cd\u4f5c"},{"location":"Linux%20Shell%20Script/command/#3","text":"ps \u8f38\u51fa\u904b\u884c\u9032\u7a0b\u7684\u8a0a\u606f -A , -e \u986f\u793a\u6240\u6709\u9032\u7a0b -N \u986f\u793a\u8207\u6307\u5b9a\u53c3\u6578\u4e0d\u7b26\u7684\u6240\u6709\u9032\u7a0b -a \u986f\u793a\u9664\u63a7\u5236(session leader)\u8207\u7121\u7d42\u7aef\u6a5f\u4ee5\u5916\u7684\u6240\u6709\u9032\u7a0b -d \u986f\u793a\u9664\u63a7\u5236\u5916\u6240\u6709\u9032\u7a0b -C [cmdlist] \u986f\u793a\u5305\u542b\u5728cmdlist\u5167\u7684\u9032\u7a0b -U [userlist] \u986f\u793a\u5728userlist\u5167\u7684\u9032\u7a0b -F \u986f\u793a\u66f4\u591a\u984d\u5916\u8f38\u51fa --forest \u986f\u793ashell\u7236\u5b50\u95dc\u4fc2 top \u5be6\u6642\u66f4\u65b0\u9032\u7a0b\u8a0a\u606f kill \u900f\u904ePID\u5411\u9032\u7a0b\u9001\u51fa\u8a0a\u865f\uff0c\u5fc5\u9808\u662f\u9032\u7a0b\u7684owner\u6216root user pkill \u4f7f\u7528\u7a0b\u5e8f\u540d\uff0c\u800c\u4e0d\u662f\u7528PID\u7d42\u6b62\u9032\u7a0b sleep \u5e0c\u671b\u9032\u7a0b\u7b49\u5f85(\u7761\u7720)\u7684\u79d2\u6578 jobs \u986f\u793a\u5c6c\u65bc\u4f60\u7684\u6240\u6709\u9032\u7a0b coproc \u751f\u6210\u5b50shell\u4e26\u5728\u5b50shell\u4e2d\u57f7\u884c\u547d\u4ee4","title":"3. \u76e3\u63a7\u7a0b\u5e8f"},{"location":"Linux%20Shell%20Script/command/#4","text":"mount \u639b\u8f09\u5132\u5b58\u8a2d\u5099 umount \u9000\u51fa\u5132\u5b58\u8a2d\u5099 df \u67e5\u770b\u639b\u8f09\u786c\u789f\u7684\u4f7f\u7528\u60c5\u6cc1 -h \u4eba\u985e\u6613\u8b80\u7684\u65b9\u5f0f\u8f38\u51fa du \u986f\u793a\u7279\u5b9a\u76ee\u9304\u7684\u4f7f\u7528\u5927\u5c0f","title":"4. \u76e3\u6e2c\u786c\u789f"},{"location":"Linux%20Shell%20Script/scripting/","text":"\u74b0\u5883 \u00b6 \u5728\u57f7\u884c\u4e2d\uff0cshell\u6703\u900f\u904e PATH \u74b0\u5883\u8b8a\u91cf\u4f86\u5c0b\u627e\u6307\u4ee4\uff0c\u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u89e3\u6c7a\u627e\u4e0d\u5230\u547d\u4ee4\u7684\u554f\u984c * \u5c07shell\u8173\u672c\u653e\u5230 PATH \u74b0\u5883\u8b8a\u91cf\u4e2d * \u5229\u7528\u76f8\u5c0d\u6216\u7d55\u5c0d\u8def\u5f91\u4f86\u5f15\u7528\u8173\u672c * echo \u986f\u793a\u8a0a\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u55ae\u5f15\u865f ' \u6216\u96d9\u5f15\u865f \" \u754c\u5b9a\u5b57\u7b26\u4e32 * -n \u5c07\u5b57\u7b26\u4e32\u8207\u547d\u4ee4\u986f\u793a\u5728\u540c\u4e00\u5217\u4e2d * $ \u5f15\u7528\u74b0\u5883\u8b8a\u91cf * \u53cd\u659c\u7dda \\ \u5141\u8a31shell\u8173\u672c\u6309\u7167\u5b57\u9762\u986f\u793a$ \u81ea\u5b9a\u7fa9\u8b8a\u91cf \u00b6 shell\u5141\u8a31\u7528\u6236\u5728\u8173\u672c\u4e2d\u81ea\u5b9a\u7fa9\u548c\u4f7f\u7528\u81ea\u5df1\u7684\u8b8a\u91cf\uff0c\u4f46\u8b8a\u91cf\u3001\u7b49\u865f\u8207\u503c\u4e2d\u9593 \u4e0d\u80fd\u6709\u7a7a\u683c \u5f15\u7528\u8b8a\u91cf\u6642\u52a0$\uff0c\u5c0d\u8b8a\u91cf\u8ce6\u503c\u6642\u4e0d\u7528\u52a0 \u5f9e\u547d\u4ee4\u8f38\u51fa\u4e2d\u63d0\u53d6\u8a0a\u606f\u4e26\u8ce6\u4e88\u8b8a\u91cf (``) \u53cd\u5f15\u865f $() \u683c\u5f0f \u82e5 date \u70ba\u547d\u4ee4\uff0c\u5247 ``sh testing= date` \u6216\u662f \u00b6 testing=$(date) ``` \u8f38\u51fa\u65e5\u671f\u4f8b\u5b50 sh #!/bin/bash #copy the /usr/bin directory listing to a log file today=$(date +%y%m%d) ls /usr/bin -al > log.$today \u6ce8\u610f \uff1a\u547d\u4ee4\u66ff\u63db\u5b50shell\u4e2d\u57f7\u884c\uff0c\u7121\u6cd5\u4f7f\u7528\u8173\u672c\u4e2d\u7684\u8b8a\u91cf\uff0c\u4f46\u5982\u679c\u4ee5\u4e0d\u52a0\u8def\u5f91\u7684\u65b9\u5f0f\u57f7\u884c\u5247\u4e0d\u6703\u5275\u5efa\u5b50shell \u57fa\u672c\u64cd\u4f5c \u00b6 > , >> , < \u5c07\u547d\u4ee4\u4f5c\u70ba\u8f38\u5165/\u8f38\u51fa ShellSession $ date >> test.log $ command < inputfile | \uff1a\u5c07\u547d\u4ee4\u50b3\u7d66\u53e6\u4e00\u500b\u547d\u4ee4\uff0c\u9019\u500b\u904e\u7a0b\u7a31\u70ba piping ShellSession ##usage $ command1 | command2 ##Example $ rpm -qa | sort | more EOF \uff1a\u5b9a\u7fa9\u4e86\u91cd\u5b9a\u5411\u6578\u64da\u7684\u8d77\u6b62 $? \uff1alinux\u63d0\u4f9b\u7684\u5c08\u9580\u8b8a\u91cf\uff0c\u7528\u4f86\u4fdd\u5b58\u6700\u5f8c\u4e00\u500b\u5df2\u57f7\u884c\u547d\u4ee4\u7684\u9000\u51fa\u72c0\u614b\u78bc \u4e00\u822c\u72c0\u614b\u78bc\u5b9a\u7fa9\u5982\u4e0b | \u72c0\u614b\u78bc | \u63cf\u8ff0 | | :-----: | :---- | | 0 | \u547d\u4ee4\u6210\u529f\u7d50\u675f | | 1 | \u4e00\u822c\u672a\u77e5\u932f\u8aa4 | | 2 | \u4e0d\u9069\u5408\u7684shell\u547d\u4ee4 | | 126 | \u547d\u4ee4\u7121\u6cd5\u57f7\u884c | | 127 | \u6c92\u627e\u5230\u547d\u4ee4 | | 128 | \u7121\u6548\u7684\u9000\u51fa\u53c3\u6578 | | 128+x | \u8207linux\u4fe1\u865fx\u76f8\u95dc\u7684\u56b4\u91cd\u932f\u8aa4 | | 130 | \u900f\u904e ctrl + c \u7d42\u6b62\u7684\u547d\u4ee4 | | 255 | \u6b63\u5e38\u7bc4\u570d\u4ee5\u5916\u7684\u9000\u51fa\u72c0\u614b\u78bc | exit \u9ed8\u8a8d\u72c0\u614b\u4e0b\uff0c\u4ee5\u8173\u672c\u6700\u5f8c\u4e00\u500b\u547d\u4ee4\u7684\u9000\u51fa\u72c0\u614b\u78bc\u9000\u51fa\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u9000\u51fa\u72c0\u614b\u78bc > \u4f7f\u7528\u6642\uff0c\u8a18\u5f97\u9000\u51fa\u6700\u5927\u72c0\u614b\u78bc\u50c5\u6709255\uff0c\u8d85\u904e\u6703\u4ee5255\u7684\u9918\u6578\u4f5c\u70ba\u56de\u50b3\u503c \u6578\u5b78\u904b\u7b97 \u00b6 expr \u547d\u4ee4\uff1a\u6700\u4e00\u958b\u59cb\u7684\u6578\u5b78\u8868\u9054\u5f0f\u547d\u4ee4\uff0c\u4f46\u4e5f\u7279\u5225\u7b28\u62d9 \u65b9\u62ec\u865f [] \uff1a\u66f4\u7c21\u55ae\u7684\u65b9\u6cd5\u57f7\u884c\u6578\u5b78\u904b\u7b97 \u8981\u5c07\u6578\u5b78\u904b\u7b97\u8ce6\u7d66\u8b8a\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 $ \u8207 [] \uff1a var=$[operation] > bash shell\u4e00\u822c\u53ea\u652f\u63f4\u6574\u6578\u904b\u7b97 \u6d6e\u9ede\u6578 \u00b6 bc \uff1abash \u8a08\u7b97\u5668 > \u5be6\u969b\u4e0a\u662f\u4e00\u7a2e\u7de8\u7a0b\u8a9e\u8a00\uff0c\u5141\u8a31\u5728\u547d\u4ee4\u884c\u8f38\u5165\u6d6e\u9ede\u6578\u8868\u9054 \u904b\u7b97\u9700\u8981\u5148\u8a2d\u7f6e scale \uff0c\u986f\u793a\u5c0f\u6578\u9ede\u5f8c\u5e7e\u4f4d\uff0c\u9810\u8a2d\u70ba 0 * quit \uff1a\u96e2\u958b bc \u5728\u8173\u672c\u4e2d\u4f7f\u7528 bc \u7684\u65b9\u6cd5\u70ba $ variable=$(echo \"options; expression\" | bc) in shell script Shell var1=$(echo \"scale=4;3.44 / 5 \"| bc) echo \"the answer is $var1\" \u8981\u5927\u91cf\u4f7f\u7528\u6d6e\u9ede\u6578\u904b\u7b97\uff0c\u53ef\u4ee5\u5229\u7528\u5728\u547d\u4ee4\u5217\u4e2d\u91cd\u5b9a\u5411\u7684\u65b9\u5f0f Shell varable=$(bc << EOF options statements expressions EOF ) EOF \u5b57\u7b26\u4e32\u6a19\u5b9a\u4e86\u91cd\u5b9a\u5411\u7d66 bc \u547d\u4ee4\u7684\u8d77\u6b62 \u689d\u4ef6\u63a7\u5236","title":"Scripting"},{"location":"Linux%20Shell%20Script/scripting/#_1","text":"\u5728\u57f7\u884c\u4e2d\uff0cshell\u6703\u900f\u904e PATH \u74b0\u5883\u8b8a\u91cf\u4f86\u5c0b\u627e\u6307\u4ee4\uff0c\u6709\u5169\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u89e3\u6c7a\u627e\u4e0d\u5230\u547d\u4ee4\u7684\u554f\u984c * \u5c07shell\u8173\u672c\u653e\u5230 PATH \u74b0\u5883\u8b8a\u91cf\u4e2d * \u5229\u7528\u76f8\u5c0d\u6216\u7d55\u5c0d\u8def\u5f91\u4f86\u5f15\u7528\u8173\u672c * echo \u986f\u793a\u8a0a\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u55ae\u5f15\u865f ' \u6216\u96d9\u5f15\u865f \" \u754c\u5b9a\u5b57\u7b26\u4e32 * -n \u5c07\u5b57\u7b26\u4e32\u8207\u547d\u4ee4\u986f\u793a\u5728\u540c\u4e00\u5217\u4e2d * $ \u5f15\u7528\u74b0\u5883\u8b8a\u91cf * \u53cd\u659c\u7dda \\ \u5141\u8a31shell\u8173\u672c\u6309\u7167\u5b57\u9762\u986f\u793a$","title":"\u74b0\u5883"},{"location":"Linux%20Shell%20Script/scripting/#_2","text":"shell\u5141\u8a31\u7528\u6236\u5728\u8173\u672c\u4e2d\u81ea\u5b9a\u7fa9\u548c\u4f7f\u7528\u81ea\u5df1\u7684\u8b8a\u91cf\uff0c\u4f46\u8b8a\u91cf\u3001\u7b49\u865f\u8207\u503c\u4e2d\u9593 \u4e0d\u80fd\u6709\u7a7a\u683c \u5f15\u7528\u8b8a\u91cf\u6642\u52a0$\uff0c\u5c0d\u8b8a\u91cf\u8ce6\u503c\u6642\u4e0d\u7528\u52a0 \u5f9e\u547d\u4ee4\u8f38\u51fa\u4e2d\u63d0\u53d6\u8a0a\u606f\u4e26\u8ce6\u4e88\u8b8a\u91cf (``) \u53cd\u5f15\u865f $() \u683c\u5f0f \u82e5 date \u70ba\u547d\u4ee4\uff0c\u5247 ``sh testing= date`","title":"\u81ea\u5b9a\u7fa9\u8b8a\u91cf"},{"location":"Linux%20Shell%20Script/scripting/#_3","text":"testing=$(date) ``` \u8f38\u51fa\u65e5\u671f\u4f8b\u5b50 sh #!/bin/bash #copy the /usr/bin directory listing to a log file today=$(date +%y%m%d) ls /usr/bin -al > log.$today \u6ce8\u610f \uff1a\u547d\u4ee4\u66ff\u63db\u5b50shell\u4e2d\u57f7\u884c\uff0c\u7121\u6cd5\u4f7f\u7528\u8173\u672c\u4e2d\u7684\u8b8a\u91cf\uff0c\u4f46\u5982\u679c\u4ee5\u4e0d\u52a0\u8def\u5f91\u7684\u65b9\u5f0f\u57f7\u884c\u5247\u4e0d\u6703\u5275\u5efa\u5b50shell","title":"\u6216\u662f"},{"location":"Linux%20Shell%20Script/scripting/#_4","text":"> , >> , < \u5c07\u547d\u4ee4\u4f5c\u70ba\u8f38\u5165/\u8f38\u51fa ShellSession $ date >> test.log $ command < inputfile | \uff1a\u5c07\u547d\u4ee4\u50b3\u7d66\u53e6\u4e00\u500b\u547d\u4ee4\uff0c\u9019\u500b\u904e\u7a0b\u7a31\u70ba piping ShellSession ##usage $ command1 | command2 ##Example $ rpm -qa | sort | more EOF \uff1a\u5b9a\u7fa9\u4e86\u91cd\u5b9a\u5411\u6578\u64da\u7684\u8d77\u6b62 $? \uff1alinux\u63d0\u4f9b\u7684\u5c08\u9580\u8b8a\u91cf\uff0c\u7528\u4f86\u4fdd\u5b58\u6700\u5f8c\u4e00\u500b\u5df2\u57f7\u884c\u547d\u4ee4\u7684\u9000\u51fa\u72c0\u614b\u78bc \u4e00\u822c\u72c0\u614b\u78bc\u5b9a\u7fa9\u5982\u4e0b | \u72c0\u614b\u78bc | \u63cf\u8ff0 | | :-----: | :---- | | 0 | \u547d\u4ee4\u6210\u529f\u7d50\u675f | | 1 | \u4e00\u822c\u672a\u77e5\u932f\u8aa4 | | 2 | \u4e0d\u9069\u5408\u7684shell\u547d\u4ee4 | | 126 | \u547d\u4ee4\u7121\u6cd5\u57f7\u884c | | 127 | \u6c92\u627e\u5230\u547d\u4ee4 | | 128 | \u7121\u6548\u7684\u9000\u51fa\u53c3\u6578 | | 128+x | \u8207linux\u4fe1\u865fx\u76f8\u95dc\u7684\u56b4\u91cd\u932f\u8aa4 | | 130 | \u900f\u904e ctrl + c \u7d42\u6b62\u7684\u547d\u4ee4 | | 255 | \u6b63\u5e38\u7bc4\u570d\u4ee5\u5916\u7684\u9000\u51fa\u72c0\u614b\u78bc | exit \u9ed8\u8a8d\u72c0\u614b\u4e0b\uff0c\u4ee5\u8173\u672c\u6700\u5f8c\u4e00\u500b\u547d\u4ee4\u7684\u9000\u51fa\u72c0\u614b\u78bc\u9000\u51fa\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u9000\u51fa\u72c0\u614b\u78bc > \u4f7f\u7528\u6642\uff0c\u8a18\u5f97\u9000\u51fa\u6700\u5927\u72c0\u614b\u78bc\u50c5\u6709255\uff0c\u8d85\u904e\u6703\u4ee5255\u7684\u9918\u6578\u4f5c\u70ba\u56de\u50b3\u503c","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"Linux%20Shell%20Script/scripting/#_5","text":"expr \u547d\u4ee4\uff1a\u6700\u4e00\u958b\u59cb\u7684\u6578\u5b78\u8868\u9054\u5f0f\u547d\u4ee4\uff0c\u4f46\u4e5f\u7279\u5225\u7b28\u62d9 \u65b9\u62ec\u865f [] \uff1a\u66f4\u7c21\u55ae\u7684\u65b9\u6cd5\u57f7\u884c\u6578\u5b78\u904b\u7b97 \u8981\u5c07\u6578\u5b78\u904b\u7b97\u8ce6\u7d66\u8b8a\u91cf\uff0c\u53ef\u4ee5\u4f7f\u7528 $ \u8207 [] \uff1a var=$[operation] > bash shell\u4e00\u822c\u53ea\u652f\u63f4\u6574\u6578\u904b\u7b97","title":"\u6578\u5b78\u904b\u7b97"},{"location":"Linux%20Shell%20Script/scripting/#_6","text":"bc \uff1abash \u8a08\u7b97\u5668 > \u5be6\u969b\u4e0a\u662f\u4e00\u7a2e\u7de8\u7a0b\u8a9e\u8a00\uff0c\u5141\u8a31\u5728\u547d\u4ee4\u884c\u8f38\u5165\u6d6e\u9ede\u6578\u8868\u9054 \u904b\u7b97\u9700\u8981\u5148\u8a2d\u7f6e scale \uff0c\u986f\u793a\u5c0f\u6578\u9ede\u5f8c\u5e7e\u4f4d\uff0c\u9810\u8a2d\u70ba 0 * quit \uff1a\u96e2\u958b bc \u5728\u8173\u672c\u4e2d\u4f7f\u7528 bc \u7684\u65b9\u6cd5\u70ba $ variable=$(echo \"options; expression\" | bc) in shell script Shell var1=$(echo \"scale=4;3.44 / 5 \"| bc) echo \"the answer is $var1\" \u8981\u5927\u91cf\u4f7f\u7528\u6d6e\u9ede\u6578\u904b\u7b97\uff0c\u53ef\u4ee5\u5229\u7528\u5728\u547d\u4ee4\u5217\u4e2d\u91cd\u5b9a\u5411\u7684\u65b9\u5f0f Shell varable=$(bc << EOF options statements expressions EOF ) EOF \u5b57\u7b26\u4e32\u6a19\u5b9a\u4e86\u91cd\u5b9a\u5411\u7d66 bc \u547d\u4ee4\u7684\u8d77\u6b62 \u689d\u4ef6\u63a7\u5236","title":"\u6d6e\u9ede\u6578"},{"location":"Linux%20Shell%20Script/shell_env/","text":"shell\u547d\u4ee4 \u00b6 \u6709\u5f88\u591a\u7a2e\u4e0d\u540cshell, \u53ef\u4ee5\u900f\u904e echo $0 \u4f86\u78ba\u8a8d\u76ee\u524d\u4f7f\u7528\u7684shell ubuntu@ubuntu$ echo $0 /bin/bash \u5728CLI\u4e2d\uff0c\u770b\u4e0d\u51fa\u76ee\u524d\u958b\u7684shell\u53ca\u7236\u5b50\u95dc\u4fc2\uff0c\u53ef\u4ee5\u5229\u7528 ps \u67e5\u770b\u95dc\u4fc2 ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ ps -f UID PID PPID C STIME TTY TIME CMD ubuntu 34038 33903 0 12:21 pts/0 00:00:00 /bin/bash --init-file /home/ubuntu/.vscode-server/cli/servers/Stable-611f9bfce64f25108829dd295f54a6894e87339d/server/out/vs/workbench/contrib/terminal/browser/med ubuntu 35418 34038 0 21:17 pts/0 00:00:00 bash ubuntu 35437 35418 1 21:17 pts/0 00:00:00 bash ubuntu 35450 35437 1 21:17 pts/0 00:00:00 bash ubuntu 35489 35450 0 21:17 pts/0 00:00:00 ps -f ubuntu@ubuntu:~/CPP_Project$ ps --forest PID TTY TIME CMD 34038 pts/0 00:00:00 bash 35418 pts/0 00:00:00 \\_ bash 35437 pts/0 00:00:00 \\_ bash 35450 pts/0 00:00:00 \\_ bash 35541 pts/0 00:00:00 \\_ ps bash\u4e5f\u652f\u63f4\u4e0b\u5217\u9078\u9805 -c \u5f9e string \u4e2d\u8b80\u53d6\u547d\u4ee4 -i \u555f\u52d5\u80fd\u5920\u8b80\u53d6\u7528\u6236\u8f38\u5165\u7684shell -l \u4f5c\u70ba\u767b\u5165shell -r \u555f\u52d5\u4e00\u500b\u53d7\u9650\u7684shell -s \u5f9e\u6a19\u6e96\u8f38\u5165\u4e2d\u8b80\u53d6\u547d\u4ee4 \u53ef\u4ee5\u5f9e echo $BASH_SUBSHELL \u67e5\u770b\u662f\u5426\u751f\u6210\u5b50shell\uff0c\u8fd4\u56de0\u4ee3\u8868\u6c92\u6709 printenv \u8f38\u51fa\u5168\u57df\u74b0\u5883\u8b8a\u6578\uff0c\u6216\u8b8a\u6578\u503c \u4e5f\u53ef\u4ee5\u7528 echo $ \u986f\u793a\u8b8a\u91cf\u503c set \u986f\u793a\u7279\u5b9a\u9032\u7a0b\u7684\u6240\u6709\u74b0\u5883\u8b8a\u91cf \u4f7f\u7528\u81ea\u5b9a\u7fa9\u8b8a\u91cf\u6642\uff0c\u4f7f\u7528\u5c0f\u5beb\u53ef\u4ee5\u907f\u514d\u540c\u540d\u7522\u751f\u7684\u707d\u96e3 \u8a2d\u5b9a\u5168\u57df\u8b8a\u91cf\u7684\u65b9\u6cd5\uff0c\u4e5f\u662f\u5148\u5275\u9020\u5c40\u90e8\u8b8a\u91cf\u5f8c\uff0c\u518d\u5c07\u5176\u5c0e\u5165\u5168\u57df\u8b8a\u91cf export my_variable=\"I am Global now\" export my_variable echo $my_variable *\u5728\u5b50shell\u4fee\u6539\u4e26\u4e0d\u5f71\u97ff\u7236shell\u7684\u5168\u57df\u8b8a\u91cf\u503c unset \u522a\u9664\u74b0\u5883\u8b8a\u91cf \u958b\u555f__bash shell__\u6642\uff0c\u901a\u5e38\u6703\u5f9e5\u500b\u4e0d\u540c\u555f\u52d5\u6587\u4ef6\u8b80\u53d6\u547d\u4ee4 * /etc/profile : default * $HOME/.bash_profile * $HOME/.bashrc * $HOME/.bash_login * $HOME/.profile \u5927\u591a\u6578\u767c\u884c\u7248\u4e2d\uff0c\u4fdd\u5b58\u500b\u4eba\u7528\u6236\u7684bash shell\u70ba $HOME/.bashrc * \u6578\u64da\u8b8a\u91cf\uff1a\u5c07\u74b0\u5883\u8b8a\u91cf\u4f5c\u70ba\u6578\u64da\u4f7f\u7528 $ mytest=(zero one two three four) $ echo $mytest zero $ echo ${mytest[2]} two $ echo ${mytest[*]} zero one two three four","title":"Shell env"},{"location":"Linux%20Shell%20Script/shell_env/#shell","text":"\u6709\u5f88\u591a\u7a2e\u4e0d\u540cshell, \u53ef\u4ee5\u900f\u904e echo $0 \u4f86\u78ba\u8a8d\u76ee\u524d\u4f7f\u7528\u7684shell ubuntu@ubuntu$ echo $0 /bin/bash \u5728CLI\u4e2d\uff0c\u770b\u4e0d\u51fa\u76ee\u524d\u958b\u7684shell\u53ca\u7236\u5b50\u95dc\u4fc2\uff0c\u53ef\u4ee5\u5229\u7528 ps \u67e5\u770b\u95dc\u4fc2 ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ bash ubuntu@ubuntu:~/CPP_Project$ ps -f UID PID PPID C STIME TTY TIME CMD ubuntu 34038 33903 0 12:21 pts/0 00:00:00 /bin/bash --init-file /home/ubuntu/.vscode-server/cli/servers/Stable-611f9bfce64f25108829dd295f54a6894e87339d/server/out/vs/workbench/contrib/terminal/browser/med ubuntu 35418 34038 0 21:17 pts/0 00:00:00 bash ubuntu 35437 35418 1 21:17 pts/0 00:00:00 bash ubuntu 35450 35437 1 21:17 pts/0 00:00:00 bash ubuntu 35489 35450 0 21:17 pts/0 00:00:00 ps -f ubuntu@ubuntu:~/CPP_Project$ ps --forest PID TTY TIME CMD 34038 pts/0 00:00:00 bash 35418 pts/0 00:00:00 \\_ bash 35437 pts/0 00:00:00 \\_ bash 35450 pts/0 00:00:00 \\_ bash 35541 pts/0 00:00:00 \\_ ps bash\u4e5f\u652f\u63f4\u4e0b\u5217\u9078\u9805 -c \u5f9e string \u4e2d\u8b80\u53d6\u547d\u4ee4 -i \u555f\u52d5\u80fd\u5920\u8b80\u53d6\u7528\u6236\u8f38\u5165\u7684shell -l \u4f5c\u70ba\u767b\u5165shell -r \u555f\u52d5\u4e00\u500b\u53d7\u9650\u7684shell -s \u5f9e\u6a19\u6e96\u8f38\u5165\u4e2d\u8b80\u53d6\u547d\u4ee4 \u53ef\u4ee5\u5f9e echo $BASH_SUBSHELL \u67e5\u770b\u662f\u5426\u751f\u6210\u5b50shell\uff0c\u8fd4\u56de0\u4ee3\u8868\u6c92\u6709 printenv \u8f38\u51fa\u5168\u57df\u74b0\u5883\u8b8a\u6578\uff0c\u6216\u8b8a\u6578\u503c \u4e5f\u53ef\u4ee5\u7528 echo $ \u986f\u793a\u8b8a\u91cf\u503c set \u986f\u793a\u7279\u5b9a\u9032\u7a0b\u7684\u6240\u6709\u74b0\u5883\u8b8a\u91cf \u4f7f\u7528\u81ea\u5b9a\u7fa9\u8b8a\u91cf\u6642\uff0c\u4f7f\u7528\u5c0f\u5beb\u53ef\u4ee5\u907f\u514d\u540c\u540d\u7522\u751f\u7684\u707d\u96e3 \u8a2d\u5b9a\u5168\u57df\u8b8a\u91cf\u7684\u65b9\u6cd5\uff0c\u4e5f\u662f\u5148\u5275\u9020\u5c40\u90e8\u8b8a\u91cf\u5f8c\uff0c\u518d\u5c07\u5176\u5c0e\u5165\u5168\u57df\u8b8a\u91cf export my_variable=\"I am Global now\" export my_variable echo $my_variable *\u5728\u5b50shell\u4fee\u6539\u4e26\u4e0d\u5f71\u97ff\u7236shell\u7684\u5168\u57df\u8b8a\u91cf\u503c unset \u522a\u9664\u74b0\u5883\u8b8a\u91cf \u958b\u555f__bash shell__\u6642\uff0c\u901a\u5e38\u6703\u5f9e5\u500b\u4e0d\u540c\u555f\u52d5\u6587\u4ef6\u8b80\u53d6\u547d\u4ee4 * /etc/profile : default * $HOME/.bash_profile * $HOME/.bashrc * $HOME/.bash_login * $HOME/.profile \u5927\u591a\u6578\u767c\u884c\u7248\u4e2d\uff0c\u4fdd\u5b58\u500b\u4eba\u7528\u6236\u7684bash shell\u70ba $HOME/.bashrc * \u6578\u64da\u8b8a\u91cf\uff1a\u5c07\u74b0\u5883\u8b8a\u91cf\u4f5c\u70ba\u6578\u64da\u4f7f\u7528 $ mytest=(zero one two three four) $ echo $mytest zero $ echo ${mytest[2]} two $ echo ${mytest[*]} zero one two three four","title":"shell\u547d\u4ee4"},{"location":"Operation%20System/Chapter_1/","text":"this is github pages GitHub Pages","title":"Chapter 1"},{"location":"UE/CH1_Getting_Started/","text":"Chapter 1 : Getting Started \u00b6 It just some environment setting stuff \u00b6 Install Visual Studio Set up user interface & prefernece Unreal engine Installation Create your first project Datatype & Class build in Unreal Engine UE_LOG creation FString() function important note \u00b6 ctrl + alt + F11 to perform live coding rebuild","title":"Chapter 1 : Getting Started"},{"location":"UE/CH1_Getting_Started/#chapter-1-getting-started","text":"","title":"Chapter 1 : Getting Started"},{"location":"UE/CH1_Getting_Started/#it-just-some-environment-setting-stuff","text":"Install Visual Studio Set up user interface & prefernece Unreal engine Installation Create your first project Datatype & Class build in Unreal Engine UE_LOG creation FString() function","title":"It just some environment setting stuff"},{"location":"UE/CH1_Getting_Started/#important-note","text":"ctrl + alt + F11 to perform live coding rebuild","title":"important note"},{"location":"UE/CH2_Creating%20Classes/","text":"Chapter 2 : Creating UE Properties \u00b6 1. Creating UCLASS \u00b6 It's perfectally accaptable using naive C++ Object Class and new , delete operaters in UE Classes, but using UCLASS macro can utilize UE's build in smart pointer and garbage collection functions. * UE4 such as UPROPERTY , UFUNCTION and UCLASS will be generated after include the < UCLASSNAME >.generate.h files * It's important to noted that < UCLASSNAME >.genetate.h file must be included as the last #include in the list of #include in UCLASS.h Here's a correct example #pragma once #include \"CoreMinimal.h\" #include \"UObject/NoExportTypes.h\" //CORRECT, generated file is the last file included #include \"UserProfile.generated.h\" UCLASS() class XDD_API UUserProfile : public UObject { GENERATED_BODY() }; Several keywords can modify the way of UCALSS behaves * Blueprintable : be able to construct a blueprint inside UE editor UCLASS(Blueprintable) BlueprintType : be able to use as a variable from blueprint UCLASS(BlueprintType) NotBlueprintType : can not use this variable from blueprint UCLASS(NotBlueprintType) 2. Creating UPROPERTY \u00b6 A compelet document can be found in here in UCLASS , Each UPROPERTY represent it can be a visual editable or blueprint-accessable data member of the UCLASS Examples such as EditAnywhere , BlueprintReadWrite can be added to each UPROPERTY UCLASS(Blueprintable) class example_API : public UObject { GENERATE_BODY() public: UPROPERTY(EditAnyWhere, BlueprintReadWrite, Category = Stats) float Armor; UPROPERTY(EditAnyWhere, BlueprintReadWrite, Category = Stats) float HpMax; }; parameters can be passed to the UPROPERTY() macro, such as * EditAnywhere : the property can be edited every where obviously * EditDefaultsOnly : Property can be changed only for blueprint before runtime(change default value) * EditInstanceOnly : Property can be changed only for game-level instance of UCLASS object * BlueprintReadWirte : Property can be both readable & writable from blueprint diagram, notice that with BlueprintReadWrite , it must be a public member of class * BlueprintReadOnly : The Property must be set from C++ and cannot be changed from the blueprints * Category : It's recommended to always specify a Category for UPROPERTY( ) , it determines which submenu the UPROPERTY( ) will appear under in the property editor ## 3. Allocation details can be found here As reference before, we should not use new and delete for opject creation, instead, we use ConstructObject to instantiate object UCLASS should be considered as resources to the C++ code, and their names should never hardcoded into the code base. Therefore, we can declare an empty UCLASS reference in C++ code, then select it from blueprint dialog in UE editor. // in UCLASS code section //Display any UCLASSes deriving from UObject in a dropdown menu in Blueprints. UPROPERTY(Editanywhere, BlueprintReadWrite, Category = Unit) TSubclassOf<UObject> UClassOfPlayer; //Displays string name of UCLASSes that derive from the GameMode C++ base class UPROPERTY(EditAnywhere, meta = (MetaClass = \"GameMode\"), Category = Unit) FstringClassReference UClassGameMode; TSubclassOf<> : specify a UClass name using drop-down menu inside UE editor with related member. FStringClassReference :the MetaClass refer to the base C++ class, which limit the drop-down menu's content to only the blueprints derived from that C++ class. Instantiating \u00b6 details can be found here Instantiating new instances of UObject typically use ConstructObject<> or NewObject<> , it will need at least two info to work properly. * UClass reference to which type you want to initiate * Original C++ base class for example, initiate the object using ConstructObject< > will looks like ObjectType* object = ConstructObject<ObjectType>(UClassReference); NewObject<> is simple, but need to pass a GetTransientPackage() with each call ObjectType* object = NewObject<ObjectType>(GetTransientPackage(), UClassReference); Destroying \u00b6 simply call ConditionalBeginDestroy() to begin teardown newobject->ConditionalBeginDestroy(); newobject = nullptr; default garbage collection time can be found in BaseEngine.ini we can trigger memory cleanup manually by calling GetWorld()->FroceGarbageCollection(true) 4. Creating Structure \u00b6 A blueprint editable property in UE editor that contains multiple member, docs is here USTRUCT([Specifier, Specifier, ...]) struct FStructName { GENERATED_BODY() }; 5. Creating Enum \u00b6 similar to USTRUCT UENUM([Specifier, Specifier, ...]) enum FEnumName { enumMember1; enumMember2; enumMember3; }; 5. UFUNCTION() \u00b6 UFUNCTION() is a c++ function that is also callable with BluePrint, any c++ function can be marked as a UFUNCTION() docs","title":"Chapter 2 : Creating UE Properties"},{"location":"UE/CH2_Creating%20Classes/#chapter-2-creating-ue-properties","text":"","title":"Chapter 2 : Creating UE Properties"},{"location":"UE/CH2_Creating%20Classes/#1-creating-uclass","text":"It's perfectally accaptable using naive C++ Object Class and new , delete operaters in UE Classes, but using UCLASS macro can utilize UE's build in smart pointer and garbage collection functions. * UE4 such as UPROPERTY , UFUNCTION and UCLASS will be generated after include the < UCLASSNAME >.generate.h files * It's important to noted that < UCLASSNAME >.genetate.h file must be included as the last #include in the list of #include in UCLASS.h Here's a correct example #pragma once #include \"CoreMinimal.h\" #include \"UObject/NoExportTypes.h\" //CORRECT, generated file is the last file included #include \"UserProfile.generated.h\" UCLASS() class XDD_API UUserProfile : public UObject { GENERATED_BODY() }; Several keywords can modify the way of UCALSS behaves * Blueprintable : be able to construct a blueprint inside UE editor UCLASS(Blueprintable) BlueprintType : be able to use as a variable from blueprint UCLASS(BlueprintType) NotBlueprintType : can not use this variable from blueprint UCLASS(NotBlueprintType)","title":"1. Creating UCLASS"},{"location":"UE/CH2_Creating%20Classes/#2-creating-uproperty","text":"A compelet document can be found in here in UCLASS , Each UPROPERTY represent it can be a visual editable or blueprint-accessable data member of the UCLASS Examples such as EditAnywhere , BlueprintReadWrite can be added to each UPROPERTY UCLASS(Blueprintable) class example_API : public UObject { GENERATE_BODY() public: UPROPERTY(EditAnyWhere, BlueprintReadWrite, Category = Stats) float Armor; UPROPERTY(EditAnyWhere, BlueprintReadWrite, Category = Stats) float HpMax; }; parameters can be passed to the UPROPERTY() macro, such as * EditAnywhere : the property can be edited every where obviously * EditDefaultsOnly : Property can be changed only for blueprint before runtime(change default value) * EditInstanceOnly : Property can be changed only for game-level instance of UCLASS object * BlueprintReadWirte : Property can be both readable & writable from blueprint diagram, notice that with BlueprintReadWrite , it must be a public member of class * BlueprintReadOnly : The Property must be set from C++ and cannot be changed from the blueprints * Category : It's recommended to always specify a Category for UPROPERTY( ) , it determines which submenu the UPROPERTY( ) will appear under in the property editor ## 3. Allocation details can be found here As reference before, we should not use new and delete for opject creation, instead, we use ConstructObject to instantiate object UCLASS should be considered as resources to the C++ code, and their names should never hardcoded into the code base. Therefore, we can declare an empty UCLASS reference in C++ code, then select it from blueprint dialog in UE editor. // in UCLASS code section //Display any UCLASSes deriving from UObject in a dropdown menu in Blueprints. UPROPERTY(Editanywhere, BlueprintReadWrite, Category = Unit) TSubclassOf<UObject> UClassOfPlayer; //Displays string name of UCLASSes that derive from the GameMode C++ base class UPROPERTY(EditAnywhere, meta = (MetaClass = \"GameMode\"), Category = Unit) FstringClassReference UClassGameMode; TSubclassOf<> : specify a UClass name using drop-down menu inside UE editor with related member. FStringClassReference :the MetaClass refer to the base C++ class, which limit the drop-down menu's content to only the blueprints derived from that C++ class.","title":"2. Creating UPROPERTY"},{"location":"UE/CH2_Creating%20Classes/#instantiating","text":"details can be found here Instantiating new instances of UObject typically use ConstructObject<> or NewObject<> , it will need at least two info to work properly. * UClass reference to which type you want to initiate * Original C++ base class for example, initiate the object using ConstructObject< > will looks like ObjectType* object = ConstructObject<ObjectType>(UClassReference); NewObject<> is simple, but need to pass a GetTransientPackage() with each call ObjectType* object = NewObject<ObjectType>(GetTransientPackage(), UClassReference);","title":"Instantiating"},{"location":"UE/CH2_Creating%20Classes/#destroying","text":"simply call ConditionalBeginDestroy() to begin teardown newobject->ConditionalBeginDestroy(); newobject = nullptr; default garbage collection time can be found in BaseEngine.ini we can trigger memory cleanup manually by calling GetWorld()->FroceGarbageCollection(true)","title":"Destroying"},{"location":"UE/CH2_Creating%20Classes/#4-creating-structure","text":"A blueprint editable property in UE editor that contains multiple member, docs is here USTRUCT([Specifier, Specifier, ...]) struct FStructName { GENERATED_BODY() };","title":"4. Creating Structure"},{"location":"UE/CH2_Creating%20Classes/#5-creating-enum","text":"similar to USTRUCT UENUM([Specifier, Specifier, ...]) enum FEnumName { enumMember1; enumMember2; enumMember3; };","title":"5. Creating Enum"},{"location":"UE/CH2_Creating%20Classes/#5-ufunction","text":"UFUNCTION() is a c++ function that is also callable with BluePrint, any c++ function can be marked as a UFUNCTION() docs","title":"5. UFUNCTION()"},{"location":"UE/CH3_Memory%20Management/","text":"Ch3 Memory Management, Smart Pointers and Debugging \u00b6 Managed Memory : \u00b6 allocate memory there's several ways to perform it NewObject<> ConstructObject<> SpawnActor<> can be found more in docs de-allcate memory object can be destroyed by calling member function of it this->ConditionalBeginDestroy() smart pointers TSharedPtr : A thread-safe reference-counter pointer indicates a share object TAutoPtr : A non-thread-safe pointer TScopedPointer example c++ TSharedPtr<MyClass>sharedPtr(new MyClass()); garbage collection GetWorld()->ForceGarbageCollection(true)","title":"Ch3 Memory Management, Smart Pointers and Debugging"},{"location":"UE/CH3_Memory%20Management/#ch3-memory-management-smart-pointers-and-debugging","text":"","title":"Ch3 Memory Management, Smart Pointers and Debugging"},{"location":"UE/CH3_Memory%20Management/#managed-memory","text":"allocate memory there's several ways to perform it NewObject<> ConstructObject<> SpawnActor<> can be found more in docs de-allcate memory object can be destroyed by calling member function of it this->ConditionalBeginDestroy() smart pointers TSharedPtr : A thread-safe reference-counter pointer indicates a share object TAutoPtr : A non-thread-safe pointer TScopedPointer example c++ TSharedPtr<MyClass>sharedPtr(new MyClass()); garbage collection GetWorld()->ForceGarbageCollection(true)","title":"Managed Memory :"},{"location":"UE/CH4_Actors_and_Components/","text":"Ch4 Actors and Components \u00b6 AActor() base \u00b6 A default Actor Class look like this in header file MyFirstActor.h #pragma once #include \"CoreMinimal.h\" #include \"GameFramework/Actor.h\" #include \"MyFirstActor.generated.h\" UCLASS() class CHAPTER_04_API AMyFirstActor : public AActor { GENERATED_BODY() public: //Set default values for this actor's properities AMyFirstActor(); protected: //Called when the game started or when spawned virtual void BeginPlay() override; public: //Called every frame virtual void tick(float DeltaTime) override; } in cpp file MyFirstActor.cpp #include \"AMyFirstActor.h\" AMyFirstActor::AMyfirstActor() { // set this actor to call Tick() every frame, can be turned off PrimaryActorTick.bCanEverTick = true; } //Called when game start or spawned void AMyFirstActor::BeginPlay() { Super::BeginPlay(); } void AMyFirstActor::Tick(float DeltaTime) { super::Tick(DeltaTime); } Destroy AActor \u00b6 Destroy by time setting timer at BeginPlay() function FTimerHandle Timer; GetWorldTimeManager.SetTimer(Timer, this, &ACustomGameModeBase::DestroyActorFunction, 10) implement DestroyActorFunction() void ACustomGameModeBase::DestroyActorFunction() { if(SpawnedActor != nullptr) { //Display message on screen GEngine->AddOnScreenDebugMessage(-1, 10, FColor::Red, TEXT(\"Actor Destroyed\")); SpawnedActor->Destroy(); } } Actor components \u00b6 Mesh of Actor \u00b6 //in header file UPROPERTY() UStaticMeshComponent *Mesh; //in cpp file AMyFirstActor::AMyFirstActor() { //add this line Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"BaseMeshComponent\"); } Assets loading \u00b6 after mesh is created, we can load assets from content directory auto MeshAsset = ConstructoHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\")); // Check if the MeshAsset is valid before setting it if(MeshAsset.Object != nullptr) { Mesh->SetStaticMesh(MeshAsset.Object); } Components attaching \u00b6 let's say that we have multiple mesh and assets need to bind together in header file HierachyActorh. UPROPERTY(VisibleAnywhere) USceneComponent *Root; UPROPERTY(VisibleAnyWhere) USceneComponent *ChildSceneComponent; UPROPERTY(VisibleAnywhere) UStaticMeshComponent *BoxOne; UPROPERTY(VisibleAnywhere) UStaticMeshComponent *BoxTwo; in cpp file // create subobject Root = CreateDefaultSubobject<USceneComponent>(\"Root\"); ChildSceneComponent = CreateDefaultSubobject<USceneComponent>(\"ChildSceneComponent\"); BoxOne = CreateDefaultSubobject<UStaticMeshComponent>(\"BoxOne\"); BoxTwo = CreateDefaultSubobject<UStaticMeshComponent>(\"BoxTwo\"); // get a reference to the cube mesh auto MeshAsset = ConstructHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.cube'\")); //Give both boxes a mesh if(MeshAsset.Object != nullptr) { BoxOne->SetStaticMesh(MeshAsset.Object); BoxTwo->SetStaticMesh(MeshAsset.Object); } RootComponent = Root; //set up the object's hierarchy BoxOne->AttachTo(Root); BoxTwo->AttachTo(ChildSceneComponent); ChildSceneComponent->AttachTo(Root); // offset and scale the child from the root ChildSceneComponent->SetRelativeTransform( FTransform(FRotator(0,0,0), FVector(250,0,0), FVector(0.1f)) ); \u00b6","title":"Ch4 Actors and Components"},{"location":"UE/CH4_Actors_and_Components/#ch4-actors-and-components","text":"","title":"Ch4 Actors and Components"},{"location":"UE/CH4_Actors_and_Components/#aactor-base","text":"A default Actor Class look like this in header file MyFirstActor.h #pragma once #include \"CoreMinimal.h\" #include \"GameFramework/Actor.h\" #include \"MyFirstActor.generated.h\" UCLASS() class CHAPTER_04_API AMyFirstActor : public AActor { GENERATED_BODY() public: //Set default values for this actor's properities AMyFirstActor(); protected: //Called when the game started or when spawned virtual void BeginPlay() override; public: //Called every frame virtual void tick(float DeltaTime) override; } in cpp file MyFirstActor.cpp #include \"AMyFirstActor.h\" AMyFirstActor::AMyfirstActor() { // set this actor to call Tick() every frame, can be turned off PrimaryActorTick.bCanEverTick = true; } //Called when game start or spawned void AMyFirstActor::BeginPlay() { Super::BeginPlay(); } void AMyFirstActor::Tick(float DeltaTime) { super::Tick(DeltaTime); }","title":"AActor() base"},{"location":"UE/CH4_Actors_and_Components/#destroy-aactor","text":"Destroy by time setting timer at BeginPlay() function FTimerHandle Timer; GetWorldTimeManager.SetTimer(Timer, this, &ACustomGameModeBase::DestroyActorFunction, 10) implement DestroyActorFunction() void ACustomGameModeBase::DestroyActorFunction() { if(SpawnedActor != nullptr) { //Display message on screen GEngine->AddOnScreenDebugMessage(-1, 10, FColor::Red, TEXT(\"Actor Destroyed\")); SpawnedActor->Destroy(); } }","title":"Destroy AActor"},{"location":"UE/CH4_Actors_and_Components/#actor-components","text":"","title":"Actor components"},{"location":"UE/CH4_Actors_and_Components/#mesh-of-actor","text":"//in header file UPROPERTY() UStaticMeshComponent *Mesh; //in cpp file AMyFirstActor::AMyFirstActor() { //add this line Mesh = CreateDefaultSubobject<UStaticMeshComponent>(\"BaseMeshComponent\"); }","title":"Mesh of Actor"},{"location":"UE/CH4_Actors_and_Components/#assets-loading","text":"after mesh is created, we can load assets from content directory auto MeshAsset = ConstructoHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\")); // Check if the MeshAsset is valid before setting it if(MeshAsset.Object != nullptr) { Mesh->SetStaticMesh(MeshAsset.Object); }","title":"Assets loading"},{"location":"UE/CH4_Actors_and_Components/#components-attaching","text":"let's say that we have multiple mesh and assets need to bind together in header file HierachyActorh. UPROPERTY(VisibleAnywhere) USceneComponent *Root; UPROPERTY(VisibleAnyWhere) USceneComponent *ChildSceneComponent; UPROPERTY(VisibleAnywhere) UStaticMeshComponent *BoxOne; UPROPERTY(VisibleAnywhere) UStaticMeshComponent *BoxTwo; in cpp file // create subobject Root = CreateDefaultSubobject<USceneComponent>(\"Root\"); ChildSceneComponent = CreateDefaultSubobject<USceneComponent>(\"ChildSceneComponent\"); BoxOne = CreateDefaultSubobject<UStaticMeshComponent>(\"BoxOne\"); BoxTwo = CreateDefaultSubobject<UStaticMeshComponent>(\"BoxTwo\"); // get a reference to the cube mesh auto MeshAsset = ConstructHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.cube'\")); //Give both boxes a mesh if(MeshAsset.Object != nullptr) { BoxOne->SetStaticMesh(MeshAsset.Object); BoxTwo->SetStaticMesh(MeshAsset.Object); } RootComponent = Root; //set up the object's hierarchy BoxOne->AttachTo(Root); BoxTwo->AttachTo(ChildSceneComponent); ChildSceneComponent->AttachTo(Root); // offset and scale the child from the root ChildSceneComponent->SetRelativeTransform( FTransform(FRotator(0,0,0), FVector(250,0,0), FVector(0.1f)) );","title":"Components attaching"},{"location":"UE/CH4_Actors_and_Components/#_1","text":"","title":""},{"location":"python/basic/","text":"Variables \u00b6 python \u5e38\u503c\u662fobject, \u5305\u542b\u4e86\u8cc7\u6599\u5b58\u653e\u4f4d\u7f6e\uff0c\u8cc7\u6599\u985e\u5225\uff0c\u8cc7\u6599\u5927\u5c0f\u8207\u5b58\u653e\u503c * id() \uff1a\u56de\u50b3\u7269\u4ef6\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e * is : \u662f\u5426\u70ba\u540c\u7b46\u8cc7\u6599 * string \uff1a\u4e26\u975e\u9023\u7e8c\u5132\u5b58\u7684\u8cc7\u6599 * index \u8ca0\u7684\u4ee3\u8868\u5f9e\u6700\u5f8c\u4e00\u500b\u5b57\u5143\u958b\u59cb * python string\u4e0d\u53ef\u900f\u904eindex\u6539\u8b8a * slicing : string[start: stop: step] dedfault value [0:to the end:1] List \u53ef\u6539\u8b8a\u7684\u5e8f\u5217\u578b\u5225 stroe reference of data type \u53ef\u4ee5\u7528indexing\u8207slicing list.copy() (default) > shallow copy","title":"Basic"},{"location":"python/basic/#variables","text":"python \u5e38\u503c\u662fobject, \u5305\u542b\u4e86\u8cc7\u6599\u5b58\u653e\u4f4d\u7f6e\uff0c\u8cc7\u6599\u985e\u5225\uff0c\u8cc7\u6599\u5927\u5c0f\u8207\u5b58\u653e\u503c * id() \uff1a\u56de\u50b3\u7269\u4ef6\u7684\u8a18\u61b6\u9ad4\u4f4d\u7f6e * is : \u662f\u5426\u70ba\u540c\u7b46\u8cc7\u6599 * string \uff1a\u4e26\u975e\u9023\u7e8c\u5132\u5b58\u7684\u8cc7\u6599 * index \u8ca0\u7684\u4ee3\u8868\u5f9e\u6700\u5f8c\u4e00\u500b\u5b57\u5143\u958b\u59cb * python string\u4e0d\u53ef\u900f\u904eindex\u6539\u8b8a * slicing : string[start: stop: step] dedfault value [0:to the end:1] List \u53ef\u6539\u8b8a\u7684\u5e8f\u5217\u578b\u5225 stroe reference of data type \u53ef\u4ee5\u7528indexing\u8207slicing list.copy() (default) > shallow copy","title":"Variables"},{"location":"python/python_scripting/","text":"python subprocess library \u00b6 basic usage subprocess.run([\"ls\", -l]) .run : subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs) .popen : the subprocess is managed by popen class structure class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, group=None, extra_groups=None, user=None, umask=-1, encoding=None, errors=None, text=None, pipesize=-1, process_group=None) ### usage Popen([\"/usr/bin/git\", \"commit\", \"-m\", \"Fixes a bug.\"]) .communicate return (stdout_data, stderr_data) Popen.communicate(input = None, timeout = None) ### usage proc = subprocess.Popen(...) try: outs, errs = proc.communicate(timeout=15) except TimeoutExpired: proc.kill() outs, errs = proc.communicate() PBD \u00b6 a tool to add breakpoint and execute code usage python -m pdb myscript.py b : set a breakpoint c : continue debugging until you hit a breakpoint s : step through the code n : to go to next line of code l : list source code for the current file (default: 11 lines including the line being executed) u : navigate up a stack frame d : navigate down a stack frame p : to print the value of an expression in the current context To set breakpoint in code, simply adding breakpoint() will do the work for you docs","title":"Python scripting"},{"location":"python/python_scripting/#python-subprocess-library","text":"basic usage subprocess.run([\"ls\", -l]) .run : subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None, **other_popen_kwargs) .popen : the subprocess is managed by popen class structure class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, group=None, extra_groups=None, user=None, umask=-1, encoding=None, errors=None, text=None, pipesize=-1, process_group=None) ### usage Popen([\"/usr/bin/git\", \"commit\", \"-m\", \"Fixes a bug.\"]) .communicate return (stdout_data, stderr_data) Popen.communicate(input = None, timeout = None) ### usage proc = subprocess.Popen(...) try: outs, errs = proc.communicate(timeout=15) except TimeoutExpired: proc.kill() outs, errs = proc.communicate()","title":"python subprocess library"},{"location":"python/python_scripting/#pbd","text":"a tool to add breakpoint and execute code usage python -m pdb myscript.py b : set a breakpoint c : continue debugging until you hit a breakpoint s : step through the code n : to go to next line of code l : list source code for the current file (default: 11 lines including the line being executed) u : navigate up a stack frame d : navigate down a stack frame p : to print the value of an expression in the current context To set breakpoint in code, simply adding breakpoint() will do the work for you docs","title":"PBD"}]}